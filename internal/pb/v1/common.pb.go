// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: common.proto

package investapi

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Тип инструмента.
type InstrumentType int32

const (
	InstrumentType_INSTRUMENT_TYPE_UNSPECIFIED          InstrumentType = 0
	InstrumentType_INSTRUMENT_TYPE_BOND                 InstrumentType = 1  //Облигация.
	InstrumentType_INSTRUMENT_TYPE_SHARE                InstrumentType = 2  //Акция.
	InstrumentType_INSTRUMENT_TYPE_CURRENCY             InstrumentType = 3  //Валюта.
	InstrumentType_INSTRUMENT_TYPE_ETF                  InstrumentType = 4  //Exchange-traded fund. Фонд.
	InstrumentType_INSTRUMENT_TYPE_FUTURES              InstrumentType = 5  //Фьючерс.
	InstrumentType_INSTRUMENT_TYPE_SP                   InstrumentType = 6  //Структурная нота.
	InstrumentType_INSTRUMENT_TYPE_OPTION               InstrumentType = 7  //Опцион.
	InstrumentType_INSTRUMENT_TYPE_CLEARING_CERTIFICATE InstrumentType = 8  //Clearing certificate.
	InstrumentType_INSTRUMENT_TYPE_INDEX                InstrumentType = 9  //Индекс.
	InstrumentType_INSTRUMENT_TYPE_COMMODITY            InstrumentType = 10 //Товар.
)

// Enum value maps for InstrumentType.
var (
	InstrumentType_name = map[int32]string{
		0:  "INSTRUMENT_TYPE_UNSPECIFIED",
		1:  "INSTRUMENT_TYPE_BOND",
		2:  "INSTRUMENT_TYPE_SHARE",
		3:  "INSTRUMENT_TYPE_CURRENCY",
		4:  "INSTRUMENT_TYPE_ETF",
		5:  "INSTRUMENT_TYPE_FUTURES",
		6:  "INSTRUMENT_TYPE_SP",
		7:  "INSTRUMENT_TYPE_OPTION",
		8:  "INSTRUMENT_TYPE_CLEARING_CERTIFICATE",
		9:  "INSTRUMENT_TYPE_INDEX",
		10: "INSTRUMENT_TYPE_COMMODITY",
	}
	InstrumentType_value = map[string]int32{
		"INSTRUMENT_TYPE_UNSPECIFIED":          0,
		"INSTRUMENT_TYPE_BOND":                 1,
		"INSTRUMENT_TYPE_SHARE":                2,
		"INSTRUMENT_TYPE_CURRENCY":             3,
		"INSTRUMENT_TYPE_ETF":                  4,
		"INSTRUMENT_TYPE_FUTURES":              5,
		"INSTRUMENT_TYPE_SP":                   6,
		"INSTRUMENT_TYPE_OPTION":               7,
		"INSTRUMENT_TYPE_CLEARING_CERTIFICATE": 8,
		"INSTRUMENT_TYPE_INDEX":                9,
		"INSTRUMENT_TYPE_COMMODITY":            10,
	}
)

func (x InstrumentType) Enum() *InstrumentType {
	p := new(InstrumentType)
	*p = x
	return p
}

func (x InstrumentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (InstrumentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x InstrumentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentType.Descriptor instead.
func (InstrumentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

// Статус запрашиваемых инструментов.
type InstrumentStatus int32

const (
	InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED InstrumentStatus = 0 //Значение не определено.
	InstrumentStatus_INSTRUMENT_STATUS_BASE        InstrumentStatus = 1 //По умолчанию — базовый список инструментов, которыми можно торговать через T-Invest API. Сейчас списки доступных бумаг в API и других интерфейсах совпадают — кроме внебиржевых бумаг, но в будущем списки могут различаться.
	InstrumentStatus_INSTRUMENT_STATUS_ALL         InstrumentStatus = 2 //Список всех инструментов.
)

// Enum value maps for InstrumentStatus.
var (
	InstrumentStatus_name = map[int32]string{
		0: "INSTRUMENT_STATUS_UNSPECIFIED",
		1: "INSTRUMENT_STATUS_BASE",
		2: "INSTRUMENT_STATUS_ALL",
	}
	InstrumentStatus_value = map[string]int32{
		"INSTRUMENT_STATUS_UNSPECIFIED": 0,
		"INSTRUMENT_STATUS_BASE":        1,
		"INSTRUMENT_STATUS_ALL":         2,
	}
)

func (x InstrumentStatus) Enum() *InstrumentStatus {
	p := new(InstrumentStatus)
	*p = x
	return p
}

func (x InstrumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (InstrumentStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x InstrumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStatus.Descriptor instead.
func (InstrumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

// Режим торгов инструмента
type SecurityTradingStatus int32

const (
	SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED                      SecurityTradingStatus = 0  //Торговый статус не определен.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING        SecurityTradingStatus = 1  //Недоступен для торгов.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_OPENING_PERIOD                   SecurityTradingStatus = 2  //Период открытия торгов.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_CLOSING_PERIOD                   SecurityTradingStatus = 3  //Период закрытия торгов.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_BREAK_IN_TRADING                 SecurityTradingStatus = 4  //Перерыв в торговле.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_NORMAL_TRADING                   SecurityTradingStatus = 5  //Нормальная торговля.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_CLOSING_AUCTION                  SecurityTradingStatus = 6  //Аукцион закрытия.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DARK_POOL_AUCTION                SecurityTradingStatus = 7  //Аукцион крупных пакетов.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DISCRETE_AUCTION                 SecurityTradingStatus = 8  //Дискретный аукцион.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD           SecurityTradingStatus = 9  //Аукцион открытия.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE SecurityTradingStatus = 10 //Период торгов по цене аукциона закрытия.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_ASSIGNED                 SecurityTradingStatus = 11 //Сессия назначена.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_CLOSE                    SecurityTradingStatus = 12 //Сессия закрыта.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_SESSION_OPEN                     SecurityTradingStatus = 13 //Сессия открыта.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING            SecurityTradingStatus = 14 //Доступна торговля в режиме внутренней ликвидности брокера.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING          SecurityTradingStatus = 15 //Перерыв торговли в режиме внутренней ликвидности брокера.
	SecurityTradingStatus_SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING SecurityTradingStatus = 16 //Недоступна торговля в режиме внутренней ликвидности брокера.
)

// Enum value maps for SecurityTradingStatus.
var (
	SecurityTradingStatus_name = map[int32]string{
		0:  "SECURITY_TRADING_STATUS_UNSPECIFIED",
		1:  "SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING",
		2:  "SECURITY_TRADING_STATUS_OPENING_PERIOD",
		3:  "SECURITY_TRADING_STATUS_CLOSING_PERIOD",
		4:  "SECURITY_TRADING_STATUS_BREAK_IN_TRADING",
		5:  "SECURITY_TRADING_STATUS_NORMAL_TRADING",
		6:  "SECURITY_TRADING_STATUS_CLOSING_AUCTION",
		7:  "SECURITY_TRADING_STATUS_DARK_POOL_AUCTION",
		8:  "SECURITY_TRADING_STATUS_DISCRETE_AUCTION",
		9:  "SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD",
		10: "SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE",
		11: "SECURITY_TRADING_STATUS_SESSION_ASSIGNED",
		12: "SECURITY_TRADING_STATUS_SESSION_CLOSE",
		13: "SECURITY_TRADING_STATUS_SESSION_OPEN",
		14: "SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING",
		15: "SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING",
		16: "SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING",
	}
	SecurityTradingStatus_value = map[string]int32{
		"SECURITY_TRADING_STATUS_UNSPECIFIED":                      0,
		"SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING":        1,
		"SECURITY_TRADING_STATUS_OPENING_PERIOD":                   2,
		"SECURITY_TRADING_STATUS_CLOSING_PERIOD":                   3,
		"SECURITY_TRADING_STATUS_BREAK_IN_TRADING":                 4,
		"SECURITY_TRADING_STATUS_NORMAL_TRADING":                   5,
		"SECURITY_TRADING_STATUS_CLOSING_AUCTION":                  6,
		"SECURITY_TRADING_STATUS_DARK_POOL_AUCTION":                7,
		"SECURITY_TRADING_STATUS_DISCRETE_AUCTION":                 8,
		"SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD":           9,
		"SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE": 10,
		"SECURITY_TRADING_STATUS_SESSION_ASSIGNED":                 11,
		"SECURITY_TRADING_STATUS_SESSION_CLOSE":                    12,
		"SECURITY_TRADING_STATUS_SESSION_OPEN":                     13,
		"SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING":            14,
		"SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING":          15,
		"SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING": 16,
	}
)

func (x SecurityTradingStatus) Enum() *SecurityTradingStatus {
	p := new(SecurityTradingStatus)
	*p = x
	return p
}

func (x SecurityTradingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityTradingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (SecurityTradingStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x SecurityTradingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityTradingStatus.Descriptor instead.
func (SecurityTradingStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

// Тип цены.
type PriceType int32

const (
	PriceType_PRICE_TYPE_UNSPECIFIED PriceType = 0 //Значение не определено.
	PriceType_PRICE_TYPE_POINT       PriceType = 1 //Цена в пунктах (только для фьючерсов и облигаций).
	PriceType_PRICE_TYPE_CURRENCY    PriceType = 2 //Цена в валюте расчетов по инструменту.
)

// Enum value maps for PriceType.
var (
	PriceType_name = map[int32]string{
		0: "PRICE_TYPE_UNSPECIFIED",
		1: "PRICE_TYPE_POINT",
		2: "PRICE_TYPE_CURRENCY",
	}
	PriceType_value = map[string]int32{
		"PRICE_TYPE_UNSPECIFIED": 0,
		"PRICE_TYPE_POINT":       1,
		"PRICE_TYPE_CURRENCY":    2,
	}
)

func (x PriceType) Enum() *PriceType {
	p := new(PriceType)
	*p = x
	return p
}

func (x PriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (PriceType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x PriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceType.Descriptor instead.
func (PriceType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type ResultSubscriptionStatus int32

const (
	ResultSubscriptionStatus_RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED ResultSubscriptionStatus = 0  //Статус подписки не определен.
	ResultSubscriptionStatus_RESULT_SUBSCRIPTION_STATUS_OK          ResultSubscriptionStatus = 1  //Подписка успешно установлена.
	ResultSubscriptionStatus_RESULT_SUBSCRIPTION_STATUS_ERROR       ResultSubscriptionStatus = 13 //Ошибка подписки
)

// Enum value maps for ResultSubscriptionStatus.
var (
	ResultSubscriptionStatus_name = map[int32]string{
		0:  "RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED",
		1:  "RESULT_SUBSCRIPTION_STATUS_OK",
		13: "RESULT_SUBSCRIPTION_STATUS_ERROR",
	}
	ResultSubscriptionStatus_value = map[string]int32{
		"RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED": 0,
		"RESULT_SUBSCRIPTION_STATUS_OK":          1,
		"RESULT_SUBSCRIPTION_STATUS_ERROR":       13,
	}
)

func (x ResultSubscriptionStatus) Enum() *ResultSubscriptionStatus {
	p := new(ResultSubscriptionStatus)
	*p = x
	return p
}

func (x ResultSubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResultSubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (ResultSubscriptionStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x ResultSubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResultSubscriptionStatus.Descriptor instead.
func (ResultSubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

// Денежная сумма в определенной валюте.
type MoneyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Строковый ISO-код валюты.
	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	// Целая часть суммы, может быть отрицательным числом.
	Units int64 `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"`
	// Дробная часть суммы, может быть отрицательным числом.
	Nano          int32 `protobuf:"varint,3,opt,name=nano,proto3" json:"nano,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoneyValue) Reset() {
	*x = MoneyValue{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoneyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyValue) ProtoMessage() {}

func (x *MoneyValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyValue.ProtoReflect.Descriptor instead.
func (*MoneyValue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *MoneyValue) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MoneyValue) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *MoneyValue) GetNano() int32 {
	if x != nil {
		return x.Nano
	}
	return 0
}

// Котировка — денежная сумма без указания валюты.
type Quotation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Целая часть суммы, может быть отрицательным числом.
	Units int64 `protobuf:"varint,1,opt,name=units,proto3" json:"units,omitempty"`
	// Дробная часть суммы, может быть отрицательным числом.
	Nano          int32 `protobuf:"varint,2,opt,name=nano,proto3" json:"nano,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Quotation) Reset() {
	*x = Quotation{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Quotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quotation) ProtoMessage() {}

func (x *Quotation) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quotation.ProtoReflect.Descriptor instead.
func (*Quotation) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *Quotation) GetUnits() int64 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Quotation) GetNano() int32 {
	if x != nil {
		return x.Nano
	}
	return 0
}

type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=time,proto3,oneof" json:"time,omitempty"` //Время формирования запроса.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *PingRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type PingDelaySettings struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PingDelayMs   *int32                 `protobuf:"varint,15,opt,name=ping_delay_ms,json=pingDelayMs,proto3,oneof" json:"ping_delay_ms,omitempty"` //Задержка (пинг) сообщений:  5000–180 000 миллисекунд. Значение по умолчанию — 120 000.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingDelaySettings) Reset() {
	*x = PingDelaySettings{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingDelaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingDelaySettings) ProtoMessage() {}

func (x *PingDelaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingDelaySettings.ProtoReflect.Descriptor instead.
func (*PingDelaySettings) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *PingDelaySettings) GetPingDelayMs() int32 {
	if x != nil && x.PingDelayMs != nil {
		return *x.PingDelayMs
	}
	return 0
}

// Проверка активности стрима.
type Ping struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Time            *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`                                                      //Время проверки.
	StreamId        string                 `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                              //Идентификатор соединения.
	PingRequestTime *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=ping_request_time,json=pingRequestTime,proto3,oneof" json:"ping_request_time,omitempty"` //Время формирования запроса.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Ping) Reset() {
	*x = Ping{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *Ping) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Ping) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Ping) GetPingRequestTime() *timestamp.Timestamp {
	if x != nil {
		return x.PingRequestTime
	}
	return nil
}

type Page struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`                             //Максимальное число возвращаемых записей.
	PageNumber    int32                  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` //Порядковый номер страницы, начиная с 0.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Page) Reset() {
	*x = Page{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Page) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Page) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

type PageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`                             //Максимальное число возвращаемых записей.
	PageNumber    int32                  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"` //Порядковый номер страницы, начиная с 0.
	TotalCount    int32                  `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` //Общее количество записей.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageResponse) Reset() {
	*x = PageResponse{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageResponse) ProtoMessage() {}

func (x *PageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageResponse.ProtoReflect.Descriptor instead.
func (*PageResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *PageResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *PageResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ResponseMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TrackingId    string                 `protobuf:"bytes,42,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"` //Идентификатор трекинга.
	ServerTime    *timestamp.Timestamp   `protobuf:"bytes,43,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"` //Серверное время.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseMetadata) Reset() {
	*x = ResponseMetadata{}
	mi := &file_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetadata) ProtoMessage() {}

func (x *ResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetadata.ProtoReflect.Descriptor instead.
func (*ResponseMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseMetadata) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *ResponseMetadata) GetServerTime() *timestamp.Timestamp {
	if x != nil {
		return x.ServerTime
	}
	return nil
}

type BrandData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LogoName      string                 `protobuf:"bytes,1,opt,name=logo_name,json=logoName,proto3" json:"logo_name,omitempty"`                  // Логотип инструмента. Имя файла для получения логотипа.
	LogoBaseColor string                 `protobuf:"bytes,2,opt,name=logo_base_color,json=logoBaseColor,proto3" json:"logo_base_color,omitempty"` //	Цвет бренда.
	TextColor     string                 `protobuf:"bytes,3,opt,name=text_color,json=textColor,proto3" json:"text_color,omitempty"`               // Цвет текста для цвета логотипа бренда.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BrandData) Reset() {
	*x = BrandData{}
	mi := &file_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BrandData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrandData) ProtoMessage() {}

func (x *BrandData) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrandData.ProtoReflect.Descriptor instead.
func (*BrandData) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *BrandData) GetLogoName() string {
	if x != nil {
		return x.LogoName
	}
	return ""
}

func (x *BrandData) GetLogoBaseColor() string {
	if x != nil {
		return x.LogoBaseColor
	}
	return ""
}

func (x *BrandData) GetTextColor() string {
	if x != nil {
		return x.TextColor
	}
	return ""
}

type ErrorDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`       //Код ошибки.
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` //Описание ошибки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	mi := &file_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *ErrorDetail) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_common_proto protoreflect.FileDescriptor

const file_common_proto_rawDesc = "" +
	"\n" +
	"\fcommon.proto\x12%tinkoff.public.invest.api.contract.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"R\n" +
	"\n" +
	"MoneyValue\x12\x1a\n" +
	"\bcurrency\x18\x01 \x01(\tR\bcurrency\x12\x14\n" +
	"\x05units\x18\x02 \x01(\x03R\x05units\x12\x12\n" +
	"\x04nano\x18\x03 \x01(\x05R\x04nano\"5\n" +
	"\tQuotation\x12\x14\n" +
	"\x05units\x18\x01 \x01(\x03R\x05units\x12\x12\n" +
	"\x04nano\x18\x02 \x01(\x05R\x04nano\"K\n" +
	"\vPingRequest\x123\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04time\x88\x01\x01B\a\n" +
	"\x05_time\"N\n" +
	"\x11PingDelaySettings\x12'\n" +
	"\rping_delay_ms\x18\x0f \x01(\x05H\x00R\vpingDelayMs\x88\x01\x01B\x10\n" +
	"\x0e_ping_delay_ms\"\xb6\x01\n" +
	"\x04Ping\x12.\n" +
	"\x04time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x1b\n" +
	"\tstream_id\x18\x02 \x01(\tR\bstreamId\x12K\n" +
	"\x11ping_request_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x0fpingRequestTime\x88\x01\x01B\x14\n" +
	"\x12_ping_request_time\"=\n" +
	"\x04Page\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x1f\n" +
	"\vpage_number\x18\x02 \x01(\x05R\n" +
	"pageNumber\"f\n" +
	"\fPageResponse\x12\x14\n" +
	"\x05limit\x18\x01 \x01(\x05R\x05limit\x12\x1f\n" +
	"\vpage_number\x18\x02 \x01(\x05R\n" +
	"pageNumber\x12\x1f\n" +
	"\vtotal_count\x18\x03 \x01(\x05R\n" +
	"totalCount\"p\n" +
	"\x10ResponseMetadata\x12\x1f\n" +
	"\vtracking_id\x18* \x01(\tR\n" +
	"trackingId\x12;\n" +
	"\vserver_time\x18+ \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"serverTime\"o\n" +
	"\tBrandData\x12\x1b\n" +
	"\tlogo_name\x18\x01 \x01(\tR\blogoName\x12&\n" +
	"\x0flogo_base_color\x18\x02 \x01(\tR\rlogoBaseColor\x12\x1d\n" +
	"\n" +
	"text_color\x18\x03 \x01(\tR\ttextColor\";\n" +
	"\vErrorDetail\x12\x12\n" +
	"\x04code\x18\x01 \x01(\tR\x04code\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage*\xd2\x02\n" +
	"\x0eInstrumentType\x12\x1f\n" +
	"\x1bINSTRUMENT_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14INSTRUMENT_TYPE_BOND\x10\x01\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_SHARE\x10\x02\x12\x1c\n" +
	"\x18INSTRUMENT_TYPE_CURRENCY\x10\x03\x12\x17\n" +
	"\x13INSTRUMENT_TYPE_ETF\x10\x04\x12\x1b\n" +
	"\x17INSTRUMENT_TYPE_FUTURES\x10\x05\x12\x16\n" +
	"\x12INSTRUMENT_TYPE_SP\x10\x06\x12\x1a\n" +
	"\x16INSTRUMENT_TYPE_OPTION\x10\a\x12(\n" +
	"$INSTRUMENT_TYPE_CLEARING_CERTIFICATE\x10\b\x12\x19\n" +
	"\x15INSTRUMENT_TYPE_INDEX\x10\t\x12\x1d\n" +
	"\x19INSTRUMENT_TYPE_COMMODITY\x10\n" +
	"*l\n" +
	"\x10InstrumentStatus\x12!\n" +
	"\x1dINSTRUMENT_STATUS_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16INSTRUMENT_STATUS_BASE\x10\x01\x12\x19\n" +
	"\x15INSTRUMENT_STATUS_ALL\x10\x02*\xce\x06\n" +
	"\x15SecurityTradingStatus\x12'\n" +
	"#SECURITY_TRADING_STATUS_UNSPECIFIED\x10\x00\x125\n" +
	"1SECURITY_TRADING_STATUS_NOT_AVAILABLE_FOR_TRADING\x10\x01\x12*\n" +
	"&SECURITY_TRADING_STATUS_OPENING_PERIOD\x10\x02\x12*\n" +
	"&SECURITY_TRADING_STATUS_CLOSING_PERIOD\x10\x03\x12,\n" +
	"(SECURITY_TRADING_STATUS_BREAK_IN_TRADING\x10\x04\x12*\n" +
	"&SECURITY_TRADING_STATUS_NORMAL_TRADING\x10\x05\x12+\n" +
	"'SECURITY_TRADING_STATUS_CLOSING_AUCTION\x10\x06\x12-\n" +
	")SECURITY_TRADING_STATUS_DARK_POOL_AUCTION\x10\a\x12,\n" +
	"(SECURITY_TRADING_STATUS_DISCRETE_AUCTION\x10\b\x122\n" +
	".SECURITY_TRADING_STATUS_OPENING_AUCTION_PERIOD\x10\t\x12<\n" +
	"8SECURITY_TRADING_STATUS_TRADING_AT_CLOSING_AUCTION_PRICE\x10\n" +
	"\x12,\n" +
	"(SECURITY_TRADING_STATUS_SESSION_ASSIGNED\x10\v\x12)\n" +
	"%SECURITY_TRADING_STATUS_SESSION_CLOSE\x10\f\x12(\n" +
	"$SECURITY_TRADING_STATUS_SESSION_OPEN\x10\r\x121\n" +
	"-SECURITY_TRADING_STATUS_DEALER_NORMAL_TRADING\x10\x0e\x123\n" +
	"/SECURITY_TRADING_STATUS_DEALER_BREAK_IN_TRADING\x10\x0f\x12<\n" +
	"8SECURITY_TRADING_STATUS_DEALER_NOT_AVAILABLE_FOR_TRADING\x10\x10*V\n" +
	"\tPriceType\x12\x1a\n" +
	"\x16PRICE_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10PRICE_TYPE_POINT\x10\x01\x12\x17\n" +
	"\x13PRICE_TYPE_CURRENCY\x10\x02*\x8f\x01\n" +
	"\x18ResultSubscriptionStatus\x12*\n" +
	"&RESULT_SUBSCRIPTION_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dRESULT_SUBSCRIPTION_STATUS_OK\x10\x01\x12$\n" +
	" RESULT_SUBSCRIPTION_STATUS_ERROR\x10\rBa\n" +
	"\x1cru.tinkoff.piapi.contract.v1P\x01Z\f./;investapi\xa2\x02\x05TIAPI\xaa\x02\x14Tinkoff.InvestApi.V1\xca\x02\x11Tinkoff\\Invest\\V1b\x06proto3"

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData []byte
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)))
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_common_proto_goTypes = []any{
	(InstrumentType)(0),           // 0: tinkoff.public.invest.api.contract.v1.InstrumentType
	(InstrumentStatus)(0),         // 1: tinkoff.public.invest.api.contract.v1.InstrumentStatus
	(SecurityTradingStatus)(0),    // 2: tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	(PriceType)(0),                // 3: tinkoff.public.invest.api.contract.v1.PriceType
	(ResultSubscriptionStatus)(0), // 4: tinkoff.public.invest.api.contract.v1.ResultSubscriptionStatus
	(*MoneyValue)(nil),            // 5: tinkoff.public.invest.api.contract.v1.MoneyValue
	(*Quotation)(nil),             // 6: tinkoff.public.invest.api.contract.v1.Quotation
	(*PingRequest)(nil),           // 7: tinkoff.public.invest.api.contract.v1.PingRequest
	(*PingDelaySettings)(nil),     // 8: tinkoff.public.invest.api.contract.v1.PingDelaySettings
	(*Ping)(nil),                  // 9: tinkoff.public.invest.api.contract.v1.Ping
	(*Page)(nil),                  // 10: tinkoff.public.invest.api.contract.v1.Page
	(*PageResponse)(nil),          // 11: tinkoff.public.invest.api.contract.v1.PageResponse
	(*ResponseMetadata)(nil),      // 12: tinkoff.public.invest.api.contract.v1.ResponseMetadata
	(*BrandData)(nil),             // 13: tinkoff.public.invest.api.contract.v1.BrandData
	(*ErrorDetail)(nil),           // 14: tinkoff.public.invest.api.contract.v1.ErrorDetail
	(*timestamp.Timestamp)(nil),   // 15: google.protobuf.Timestamp
}
var file_common_proto_depIdxs = []int32{
	15, // 0: tinkoff.public.invest.api.contract.v1.PingRequest.time:type_name -> google.protobuf.Timestamp
	15, // 1: tinkoff.public.invest.api.contract.v1.Ping.time:type_name -> google.protobuf.Timestamp
	15, // 2: tinkoff.public.invest.api.contract.v1.Ping.ping_request_time:type_name -> google.protobuf.Timestamp
	15, // 3: tinkoff.public.invest.api.contract.v1.ResponseMetadata.server_time:type_name -> google.protobuf.Timestamp
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_common_proto_msgTypes[2].OneofWrappers = []any{}
	file_common_proto_msgTypes[3].OneofWrappers = []any{}
	file_common_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
