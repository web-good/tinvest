// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.12.4
// source: marketdata.proto

package investapi

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Тип операции со списком подписок.
type SubscriptionAction int32

const (
	SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED SubscriptionAction = 0 //Статус подписки не определен.
	SubscriptionAction_SUBSCRIPTION_ACTION_SUBSCRIBE   SubscriptionAction = 1 //Подписаться.
	SubscriptionAction_SUBSCRIPTION_ACTION_UNSUBSCRIBE SubscriptionAction = 2 //Отписаться.
)

// Enum value maps for SubscriptionAction.
var (
	SubscriptionAction_name = map[int32]string{
		0: "SUBSCRIPTION_ACTION_UNSPECIFIED",
		1: "SUBSCRIPTION_ACTION_SUBSCRIBE",
		2: "SUBSCRIPTION_ACTION_UNSUBSCRIBE",
	}
	SubscriptionAction_value = map[string]int32{
		"SUBSCRIPTION_ACTION_UNSPECIFIED": 0,
		"SUBSCRIPTION_ACTION_SUBSCRIBE":   1,
		"SUBSCRIPTION_ACTION_UNSUBSCRIBE": 2,
	}
)

func (x SubscriptionAction) Enum() *SubscriptionAction {
	p := new(SubscriptionAction)
	*p = x
	return p
}

func (x SubscriptionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[0].Descriptor()
}

func (SubscriptionAction) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[0]
}

func (x SubscriptionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionAction.Descriptor instead.
func (SubscriptionAction) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{0}
}

// Интервал свечи.
type SubscriptionInterval int32

const (
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED     SubscriptionInterval = 0  //Интервал свечи не определен.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_MINUTE      SubscriptionInterval = 1  //Минутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_FIVE_MINUTES    SubscriptionInterval = 2  //Пятиминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES SubscriptionInterval = 3  //Пятнадцатиминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_HOUR        SubscriptionInterval = 4  //Часовые свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_ONE_DAY         SubscriptionInterval = 5  //Дневные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_2_MIN           SubscriptionInterval = 6  //Двухминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_3_MIN           SubscriptionInterval = 7  //Трехминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_10_MIN          SubscriptionInterval = 8  //Десятиминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_30_MIN          SubscriptionInterval = 9  //Тридцатиминутные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_2_HOUR          SubscriptionInterval = 10 //Двухчасовые свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_4_HOUR          SubscriptionInterval = 11 //Четырехчасовые свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_WEEK            SubscriptionInterval = 12 //Недельные свечи.
	SubscriptionInterval_SUBSCRIPTION_INTERVAL_MONTH           SubscriptionInterval = 13 //Месячные свечи.
)

// Enum value maps for SubscriptionInterval.
var (
	SubscriptionInterval_name = map[int32]string{
		0:  "SUBSCRIPTION_INTERVAL_UNSPECIFIED",
		1:  "SUBSCRIPTION_INTERVAL_ONE_MINUTE",
		2:  "SUBSCRIPTION_INTERVAL_FIVE_MINUTES",
		3:  "SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES",
		4:  "SUBSCRIPTION_INTERVAL_ONE_HOUR",
		5:  "SUBSCRIPTION_INTERVAL_ONE_DAY",
		6:  "SUBSCRIPTION_INTERVAL_2_MIN",
		7:  "SUBSCRIPTION_INTERVAL_3_MIN",
		8:  "SUBSCRIPTION_INTERVAL_10_MIN",
		9:  "SUBSCRIPTION_INTERVAL_30_MIN",
		10: "SUBSCRIPTION_INTERVAL_2_HOUR",
		11: "SUBSCRIPTION_INTERVAL_4_HOUR",
		12: "SUBSCRIPTION_INTERVAL_WEEK",
		13: "SUBSCRIPTION_INTERVAL_MONTH",
	}
	SubscriptionInterval_value = map[string]int32{
		"SUBSCRIPTION_INTERVAL_UNSPECIFIED":     0,
		"SUBSCRIPTION_INTERVAL_ONE_MINUTE":      1,
		"SUBSCRIPTION_INTERVAL_FIVE_MINUTES":    2,
		"SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES": 3,
		"SUBSCRIPTION_INTERVAL_ONE_HOUR":        4,
		"SUBSCRIPTION_INTERVAL_ONE_DAY":         5,
		"SUBSCRIPTION_INTERVAL_2_MIN":           6,
		"SUBSCRIPTION_INTERVAL_3_MIN":           7,
		"SUBSCRIPTION_INTERVAL_10_MIN":          8,
		"SUBSCRIPTION_INTERVAL_30_MIN":          9,
		"SUBSCRIPTION_INTERVAL_2_HOUR":          10,
		"SUBSCRIPTION_INTERVAL_4_HOUR":          11,
		"SUBSCRIPTION_INTERVAL_WEEK":            12,
		"SUBSCRIPTION_INTERVAL_MONTH":           13,
	}
)

func (x SubscriptionInterval) Enum() *SubscriptionInterval {
	p := new(SubscriptionInterval)
	*p = x
	return p
}

func (x SubscriptionInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[1].Descriptor()
}

func (SubscriptionInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[1]
}

func (x SubscriptionInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionInterval.Descriptor instead.
func (SubscriptionInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{1}
}

// Результат подписки.
type SubscriptionStatus int32

const (
	SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED                    SubscriptionStatus = 0  //Статус подписки не определен.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUCCESS                        SubscriptionStatus = 1  //Успешно.
	SubscriptionStatus_SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND           SubscriptionStatus = 2  //Инструмент не найден.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID SubscriptionStatus = 3  //Некорректный статус подписки. [Список возможных значений](./marketdata#subscriptionaction).
	SubscriptionStatus_SUBSCRIPTION_STATUS_DEPTH_IS_INVALID               SubscriptionStatus = 4  //Некорректная глубина стакана. Доступные значения — 1, 10, 20, 30, 40, 50.
	SubscriptionStatus_SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID            SubscriptionStatus = 5  //Некорректный интервал свечей. [Список возможных значений](./marketdata#subscriptioninterval).
	SubscriptionStatus_SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED              SubscriptionStatus = 6  //Превышен лимит на общее количество подписок в рамках стрима. [Лимитная политика](./limits/).
	SubscriptionStatus_SUBSCRIPTION_STATUS_INTERNAL_ERROR                 SubscriptionStatus = 7  //Внутренняя ошибка сервиса.
	SubscriptionStatus_SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS              SubscriptionStatus = 8  //Превышен лимит на количество запросов на подписки в течение установленного отрезка времени.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND         SubscriptionStatus = 9  // Активная подписка не найдена. Ошибка может возникнуть только при отписке от несуществующей подписки.
	SubscriptionStatus_SUBSCRIPTION_STATUS_SOURCE_IS_INVALID              SubscriptionStatus = 10 //Указан некорректный источник.
)

// Enum value maps for SubscriptionStatus.
var (
	SubscriptionStatus_name = map[int32]string{
		0:  "SUBSCRIPTION_STATUS_UNSPECIFIED",
		1:  "SUBSCRIPTION_STATUS_SUCCESS",
		2:  "SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND",
		3:  "SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID",
		4:  "SUBSCRIPTION_STATUS_DEPTH_IS_INVALID",
		5:  "SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID",
		6:  "SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED",
		7:  "SUBSCRIPTION_STATUS_INTERNAL_ERROR",
		8:  "SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS",
		9:  "SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND",
		10: "SUBSCRIPTION_STATUS_SOURCE_IS_INVALID",
	}
	SubscriptionStatus_value = map[string]int32{
		"SUBSCRIPTION_STATUS_UNSPECIFIED":                    0,
		"SUBSCRIPTION_STATUS_SUCCESS":                        1,
		"SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND":           2,
		"SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID": 3,
		"SUBSCRIPTION_STATUS_DEPTH_IS_INVALID":               4,
		"SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID":            5,
		"SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED":              6,
		"SUBSCRIPTION_STATUS_INTERNAL_ERROR":                 7,
		"SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS":              8,
		"SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND":         9,
		"SUBSCRIPTION_STATUS_SOURCE_IS_INVALID":              10,
	}
)

func (x SubscriptionStatus) Enum() *SubscriptionStatus {
	p := new(SubscriptionStatus)
	*p = x
	return p
}

func (x SubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[2].Descriptor()
}

func (SubscriptionStatus) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[2]
}

func (x SubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatus.Descriptor instead.
func (SubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{2}
}

// Типы источников сделок.
type TradeSourceType int32

const (
	TradeSourceType_TRADE_SOURCE_UNSPECIFIED TradeSourceType = 0 //Тип источника сделки не определён.
	TradeSourceType_TRADE_SOURCE_EXCHANGE    TradeSourceType = 1 // Биржевые сделки.
	TradeSourceType_TRADE_SOURCE_DEALER      TradeSourceType = 2 // Сделки дилера.
	TradeSourceType_TRADE_SOURCE_ALL         TradeSourceType = 3 // Все сделки.
)

// Enum value maps for TradeSourceType.
var (
	TradeSourceType_name = map[int32]string{
		0: "TRADE_SOURCE_UNSPECIFIED",
		1: "TRADE_SOURCE_EXCHANGE",
		2: "TRADE_SOURCE_DEALER",
		3: "TRADE_SOURCE_ALL",
	}
	TradeSourceType_value = map[string]int32{
		"TRADE_SOURCE_UNSPECIFIED": 0,
		"TRADE_SOURCE_EXCHANGE":    1,
		"TRADE_SOURCE_DEALER":      2,
		"TRADE_SOURCE_ALL":         3,
	}
)

func (x TradeSourceType) Enum() *TradeSourceType {
	p := new(TradeSourceType)
	*p = x
	return p
}

func (x TradeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[3].Descriptor()
}

func (TradeSourceType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[3]
}

func (x TradeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSourceType.Descriptor instead.
func (TradeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{3}
}

// Направление сделки.
type TradeDirection int32

const (
	TradeDirection_TRADE_DIRECTION_UNSPECIFIED TradeDirection = 0 //Направление сделки не определено.
	TradeDirection_TRADE_DIRECTION_BUY         TradeDirection = 1 //Покупка.
	TradeDirection_TRADE_DIRECTION_SELL        TradeDirection = 2 //Продажа.
)

// Enum value maps for TradeDirection.
var (
	TradeDirection_name = map[int32]string{
		0: "TRADE_DIRECTION_UNSPECIFIED",
		1: "TRADE_DIRECTION_BUY",
		2: "TRADE_DIRECTION_SELL",
	}
	TradeDirection_value = map[string]int32{
		"TRADE_DIRECTION_UNSPECIFIED": 0,
		"TRADE_DIRECTION_BUY":         1,
		"TRADE_DIRECTION_SELL":        2,
	}
)

func (x TradeDirection) Enum() *TradeDirection {
	p := new(TradeDirection)
	*p = x
	return p
}

func (x TradeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[4].Descriptor()
}

func (TradeDirection) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[4]
}

func (x TradeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeDirection.Descriptor instead.
func (TradeDirection) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{4}
}

// Интервал свечей. Максимальное значение интервала приведено ориентировочно, может отличаться в большую сторону в зависимости от параметров запроса.
type CandleInterval int32

const (
	CandleInterval_CANDLE_INTERVAL_UNSPECIFIED CandleInterval = 0  //Интервал не определен.
	CandleInterval_CANDLE_INTERVAL_1_MIN       CandleInterval = 1  //От 1 минуты до 1 дня. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_5_MIN       CandleInterval = 2  //От 5 минут до недели. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_15_MIN      CandleInterval = 3  //От 15 минут до 3 недель. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_HOUR        CandleInterval = 4  //От 1 часа до 3 месяцев. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_DAY         CandleInterval = 5  //От 1 дня до 6 лет. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_2_MIN       CandleInterval = 6  //От 2 минут до 1 дня. Максимальное значение `limit` — 1200.
	CandleInterval_CANDLE_INTERVAL_3_MIN       CandleInterval = 7  //От 3 минут до 1 дня. Максимальное значение `limit` — 750.
	CandleInterval_CANDLE_INTERVAL_10_MIN      CandleInterval = 8  //От 10 минут до недели. Максимальное значение `limit` — 1200.
	CandleInterval_CANDLE_INTERVAL_30_MIN      CandleInterval = 9  //От 30 минут до 3 недель. Максимальное значение `limit` — 1200.
	CandleInterval_CANDLE_INTERVAL_2_HOUR      CandleInterval = 10 //От 2 часов до 3 месяцев. Максимальное значение `limit` — 2400.
	CandleInterval_CANDLE_INTERVAL_4_HOUR      CandleInterval = 11 //От 4 часов до 3 месяцев. Максимальное значение `limit` — 700.
	CandleInterval_CANDLE_INTERVAL_WEEK        CandleInterval = 12 //От 1 недели до 5 лет. Максимальное значение `limit` — 300.
	CandleInterval_CANDLE_INTERVAL_MONTH       CandleInterval = 13 //От 1 месяца до 10 лет. Максимальное значение `limit` — 120.
	CandleInterval_CANDLE_INTERVAL_5_SEC       CandleInterval = 14 //От 5 секунд до 200 минут. Максимальное значение `limit` — 2500.
	CandleInterval_CANDLE_INTERVAL_10_SEC      CandleInterval = 15 //От 10 секунд до 200 минут. Максимальное значение `limit` — 1250.
	CandleInterval_CANDLE_INTERVAL_30_SEC      CandleInterval = 16 //От 30 секунд до 20 часов. Максимальное значение `limit` — 2500.
)

// Enum value maps for CandleInterval.
var (
	CandleInterval_name = map[int32]string{
		0:  "CANDLE_INTERVAL_UNSPECIFIED",
		1:  "CANDLE_INTERVAL_1_MIN",
		2:  "CANDLE_INTERVAL_5_MIN",
		3:  "CANDLE_INTERVAL_15_MIN",
		4:  "CANDLE_INTERVAL_HOUR",
		5:  "CANDLE_INTERVAL_DAY",
		6:  "CANDLE_INTERVAL_2_MIN",
		7:  "CANDLE_INTERVAL_3_MIN",
		8:  "CANDLE_INTERVAL_10_MIN",
		9:  "CANDLE_INTERVAL_30_MIN",
		10: "CANDLE_INTERVAL_2_HOUR",
		11: "CANDLE_INTERVAL_4_HOUR",
		12: "CANDLE_INTERVAL_WEEK",
		13: "CANDLE_INTERVAL_MONTH",
		14: "CANDLE_INTERVAL_5_SEC",
		15: "CANDLE_INTERVAL_10_SEC",
		16: "CANDLE_INTERVAL_30_SEC",
	}
	CandleInterval_value = map[string]int32{
		"CANDLE_INTERVAL_UNSPECIFIED": 0,
		"CANDLE_INTERVAL_1_MIN":       1,
		"CANDLE_INTERVAL_5_MIN":       2,
		"CANDLE_INTERVAL_15_MIN":      3,
		"CANDLE_INTERVAL_HOUR":        4,
		"CANDLE_INTERVAL_DAY":         5,
		"CANDLE_INTERVAL_2_MIN":       6,
		"CANDLE_INTERVAL_3_MIN":       7,
		"CANDLE_INTERVAL_10_MIN":      8,
		"CANDLE_INTERVAL_30_MIN":      9,
		"CANDLE_INTERVAL_2_HOUR":      10,
		"CANDLE_INTERVAL_4_HOUR":      11,
		"CANDLE_INTERVAL_WEEK":        12,
		"CANDLE_INTERVAL_MONTH":       13,
		"CANDLE_INTERVAL_5_SEC":       14,
		"CANDLE_INTERVAL_10_SEC":      15,
		"CANDLE_INTERVAL_30_SEC":      16,
	}
)

func (x CandleInterval) Enum() *CandleInterval {
	p := new(CandleInterval)
	*p = x
	return p
}

func (x CandleInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandleInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[5].Descriptor()
}

func (CandleInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[5]
}

func (x CandleInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandleInterval.Descriptor instead.
func (CandleInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{5}
}

type CandleSource int32

const (
	CandleSource_CANDLE_SOURCE_UNSPECIFIED    CandleSource = 0 //Источник свечей не определен.
	CandleSource_CANDLE_SOURCE_EXCHANGE       CandleSource = 1 //Биржевые свечи.
	CandleSource_CANDLE_SOURCE_DEALER_WEEKEND CandleSource = 2 //Свечи  дилера в результате торговли по выходным.
)

// Enum value maps for CandleSource.
var (
	CandleSource_name = map[int32]string{
		0: "CANDLE_SOURCE_UNSPECIFIED",
		1: "CANDLE_SOURCE_EXCHANGE",
		2: "CANDLE_SOURCE_DEALER_WEEKEND",
	}
	CandleSource_value = map[string]int32{
		"CANDLE_SOURCE_UNSPECIFIED":    0,
		"CANDLE_SOURCE_EXCHANGE":       1,
		"CANDLE_SOURCE_DEALER_WEEKEND": 2,
	}
)

func (x CandleSource) Enum() *CandleSource {
	p := new(CandleSource)
	*p = x
	return p
}

func (x CandleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CandleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[6].Descriptor()
}

func (CandleSource) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[6]
}

func (x CandleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CandleSource.Descriptor instead.
func (CandleSource) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{6}
}

type OrderBookType int32

const (
	OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED OrderBookType = 0 //Не определен.
	OrderBookType_ORDERBOOK_TYPE_EXCHANGE    OrderBookType = 1 //Биржевой стакан.
	OrderBookType_ORDERBOOK_TYPE_DEALER      OrderBookType = 2 //Стакан дилера.
	OrderBookType_ORDERBOOK_TYPE_ALL         OrderBookType = 3 //Стакан биржевой и дилера.
)

// Enum value maps for OrderBookType.
var (
	OrderBookType_name = map[int32]string{
		0: "ORDERBOOK_TYPE_UNSPECIFIED",
		1: "ORDERBOOK_TYPE_EXCHANGE",
		2: "ORDERBOOK_TYPE_DEALER",
		3: "ORDERBOOK_TYPE_ALL",
	}
	OrderBookType_value = map[string]int32{
		"ORDERBOOK_TYPE_UNSPECIFIED": 0,
		"ORDERBOOK_TYPE_EXCHANGE":    1,
		"ORDERBOOK_TYPE_DEALER":      2,
		"ORDERBOOK_TYPE_ALL":         3,
	}
)

func (x OrderBookType) Enum() *OrderBookType {
	p := new(OrderBookType)
	*p = x
	return p
}

func (x OrderBookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBookType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[7].Descriptor()
}

func (OrderBookType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[7]
}

func (x OrderBookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBookType.Descriptor instead.
func (OrderBookType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{7}
}

// Тип последней цены
type LastPriceType int32

const (
	LastPriceType_LAST_PRICE_UNSPECIFIED LastPriceType = 0 //Не определен.
	LastPriceType_LAST_PRICE_EXCHANGE    LastPriceType = 1 // Цена биржи.
	LastPriceType_LAST_PRICE_DEALER      LastPriceType = 2 // Цена дилера
)

// Enum value maps for LastPriceType.
var (
	LastPriceType_name = map[int32]string{
		0: "LAST_PRICE_UNSPECIFIED",
		1: "LAST_PRICE_EXCHANGE",
		2: "LAST_PRICE_DEALER",
	}
	LastPriceType_value = map[string]int32{
		"LAST_PRICE_UNSPECIFIED": 0,
		"LAST_PRICE_EXCHANGE":    1,
		"LAST_PRICE_DEALER":      2,
	}
)

func (x LastPriceType) Enum() *LastPriceType {
	p := new(LastPriceType)
	*p = x
	return p
}

func (x LastPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LastPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[8].Descriptor()
}

func (LastPriceType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[8]
}

func (x LastPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LastPriceType.Descriptor instead.
func (LastPriceType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{8}
}

type GetCandlesRequest_CandleSource int32

const (
	GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED     GetCandlesRequest_CandleSource = 0 //Все свечи.
	GetCandlesRequest_CANDLE_SOURCE_EXCHANGE        GetCandlesRequest_CandleSource = 1 //Биржевые свечи.
	GetCandlesRequest_CANDLE_SOURCE_INCLUDE_WEEKEND GetCandlesRequest_CandleSource = 3 //Все свечи с учетом торговли по выходным.
)

// Enum value maps for GetCandlesRequest_CandleSource.
var (
	GetCandlesRequest_CandleSource_name = map[int32]string{
		0: "CANDLE_SOURCE_UNSPECIFIED",
		1: "CANDLE_SOURCE_EXCHANGE",
		3: "CANDLE_SOURCE_INCLUDE_WEEKEND",
	}
	GetCandlesRequest_CandleSource_value = map[string]int32{
		"CANDLE_SOURCE_UNSPECIFIED":     0,
		"CANDLE_SOURCE_EXCHANGE":        1,
		"CANDLE_SOURCE_INCLUDE_WEEKEND": 3,
	}
)

func (x GetCandlesRequest_CandleSource) Enum() *GetCandlesRequest_CandleSource {
	p := new(GetCandlesRequest_CandleSource)
	*p = x
	return p
}

func (x GetCandlesRequest_CandleSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCandlesRequest_CandleSource) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[9].Descriptor()
}

func (GetCandlesRequest_CandleSource) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[9]
}

func (x GetCandlesRequest_CandleSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCandlesRequest_CandleSource.Descriptor instead.
func (GetCandlesRequest_CandleSource) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{28, 0}
}

// Интервал свечи.
type GetTechAnalysisRequest_IndicatorInterval int32

const (
	GetTechAnalysisRequest_INDICATOR_INTERVAL_UNSPECIFIED     GetTechAnalysisRequest_IndicatorInterval = 0  //Интервал не определен.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_MINUTE      GetTechAnalysisRequest_IndicatorInterval = 1  //1 минута.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_FIVE_MINUTES    GetTechAnalysisRequest_IndicatorInterval = 2  //5 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_FIFTEEN_MINUTES GetTechAnalysisRequest_IndicatorInterval = 3  //15 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_HOUR        GetTechAnalysisRequest_IndicatorInterval = 4  //1 час.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_ONE_DAY         GetTechAnalysisRequest_IndicatorInterval = 5  //1 день.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_2_MIN           GetTechAnalysisRequest_IndicatorInterval = 6  //2 минуты.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_3_MIN           GetTechAnalysisRequest_IndicatorInterval = 7  //3 минуты.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_10_MIN          GetTechAnalysisRequest_IndicatorInterval = 8  //10 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_30_MIN          GetTechAnalysisRequest_IndicatorInterval = 9  //30 минут.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_2_HOUR          GetTechAnalysisRequest_IndicatorInterval = 10 //2 часа.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_4_HOUR          GetTechAnalysisRequest_IndicatorInterval = 11 //4 часа.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_WEEK            GetTechAnalysisRequest_IndicatorInterval = 12 //Неделя.
	GetTechAnalysisRequest_INDICATOR_INTERVAL_MONTH           GetTechAnalysisRequest_IndicatorInterval = 13 //Месяц.
)

// Enum value maps for GetTechAnalysisRequest_IndicatorInterval.
var (
	GetTechAnalysisRequest_IndicatorInterval_name = map[int32]string{
		0:  "INDICATOR_INTERVAL_UNSPECIFIED",
		1:  "INDICATOR_INTERVAL_ONE_MINUTE",
		2:  "INDICATOR_INTERVAL_FIVE_MINUTES",
		3:  "INDICATOR_INTERVAL_FIFTEEN_MINUTES",
		4:  "INDICATOR_INTERVAL_ONE_HOUR",
		5:  "INDICATOR_INTERVAL_ONE_DAY",
		6:  "INDICATOR_INTERVAL_2_MIN",
		7:  "INDICATOR_INTERVAL_3_MIN",
		8:  "INDICATOR_INTERVAL_10_MIN",
		9:  "INDICATOR_INTERVAL_30_MIN",
		10: "INDICATOR_INTERVAL_2_HOUR",
		11: "INDICATOR_INTERVAL_4_HOUR",
		12: "INDICATOR_INTERVAL_WEEK",
		13: "INDICATOR_INTERVAL_MONTH",
	}
	GetTechAnalysisRequest_IndicatorInterval_value = map[string]int32{
		"INDICATOR_INTERVAL_UNSPECIFIED":     0,
		"INDICATOR_INTERVAL_ONE_MINUTE":      1,
		"INDICATOR_INTERVAL_FIVE_MINUTES":    2,
		"INDICATOR_INTERVAL_FIFTEEN_MINUTES": 3,
		"INDICATOR_INTERVAL_ONE_HOUR":        4,
		"INDICATOR_INTERVAL_ONE_DAY":         5,
		"INDICATOR_INTERVAL_2_MIN":           6,
		"INDICATOR_INTERVAL_3_MIN":           7,
		"INDICATOR_INTERVAL_10_MIN":          8,
		"INDICATOR_INTERVAL_30_MIN":          9,
		"INDICATOR_INTERVAL_2_HOUR":          10,
		"INDICATOR_INTERVAL_4_HOUR":          11,
		"INDICATOR_INTERVAL_WEEK":            12,
		"INDICATOR_INTERVAL_MONTH":           13,
	}
)

func (x GetTechAnalysisRequest_IndicatorInterval) Enum() *GetTechAnalysisRequest_IndicatorInterval {
	p := new(GetTechAnalysisRequest_IndicatorInterval)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_IndicatorInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_IndicatorInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[10].Descriptor()
}

func (GetTechAnalysisRequest_IndicatorInterval) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[10]
}

func (x GetTechAnalysisRequest_IndicatorInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_IndicatorInterval.Descriptor instead.
func (GetTechAnalysisRequest_IndicatorInterval) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 0}
}

type GetTechAnalysisRequest_TypeOfPrice int32

const (
	GetTechAnalysisRequest_TYPE_OF_PRICE_UNSPECIFIED GetTechAnalysisRequest_TypeOfPrice = 0 //Не указано.
	GetTechAnalysisRequest_TYPE_OF_PRICE_CLOSE       GetTechAnalysisRequest_TypeOfPrice = 1 //Цена закрытия.
	GetTechAnalysisRequest_TYPE_OF_PRICE_OPEN        GetTechAnalysisRequest_TypeOfPrice = 2 //Цена открытия.
	GetTechAnalysisRequest_TYPE_OF_PRICE_HIGH        GetTechAnalysisRequest_TypeOfPrice = 3 //Максимальное значение за выбранный интервал.
	GetTechAnalysisRequest_TYPE_OF_PRICE_LOW         GetTechAnalysisRequest_TypeOfPrice = 4 //Минимальное значение за выбранный интервал.
	GetTechAnalysisRequest_TYPE_OF_PRICE_AVG         GetTechAnalysisRequest_TypeOfPrice = 5 //Среднее значение по показателям [ (close + open + high + low) / 4 ].
)

// Enum value maps for GetTechAnalysisRequest_TypeOfPrice.
var (
	GetTechAnalysisRequest_TypeOfPrice_name = map[int32]string{
		0: "TYPE_OF_PRICE_UNSPECIFIED",
		1: "TYPE_OF_PRICE_CLOSE",
		2: "TYPE_OF_PRICE_OPEN",
		3: "TYPE_OF_PRICE_HIGH",
		4: "TYPE_OF_PRICE_LOW",
		5: "TYPE_OF_PRICE_AVG",
	}
	GetTechAnalysisRequest_TypeOfPrice_value = map[string]int32{
		"TYPE_OF_PRICE_UNSPECIFIED": 0,
		"TYPE_OF_PRICE_CLOSE":       1,
		"TYPE_OF_PRICE_OPEN":        2,
		"TYPE_OF_PRICE_HIGH":        3,
		"TYPE_OF_PRICE_LOW":         4,
		"TYPE_OF_PRICE_AVG":         5,
	}
)

func (x GetTechAnalysisRequest_TypeOfPrice) Enum() *GetTechAnalysisRequest_TypeOfPrice {
	p := new(GetTechAnalysisRequest_TypeOfPrice)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_TypeOfPrice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_TypeOfPrice) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[11].Descriptor()
}

func (GetTechAnalysisRequest_TypeOfPrice) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[11]
}

func (x GetTechAnalysisRequest_TypeOfPrice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_TypeOfPrice.Descriptor instead.
func (GetTechAnalysisRequest_TypeOfPrice) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 1}
}

type GetTechAnalysisRequest_IndicatorType int32

const (
	GetTechAnalysisRequest_INDICATOR_TYPE_UNSPECIFIED GetTechAnalysisRequest_IndicatorType = 0 //Не определен.
	GetTechAnalysisRequest_INDICATOR_TYPE_BB          GetTechAnalysisRequest_IndicatorType = 1 //Bollinger Bands — линия Боллинжера.
	GetTechAnalysisRequest_INDICATOR_TYPE_EMA         GetTechAnalysisRequest_IndicatorType = 2 //Exponential Moving Average — EMA, экспоненциальная скользящая средняя.
	GetTechAnalysisRequest_INDICATOR_TYPE_RSI         GetTechAnalysisRequest_IndicatorType = 3 //Relative Strength Index — индекс относительной силы.
	GetTechAnalysisRequest_INDICATOR_TYPE_MACD        GetTechAnalysisRequest_IndicatorType = 4 //Moving Average Convergence/Divergence — схождение/расхождение скользящих средних.
	GetTechAnalysisRequest_INDICATOR_TYPE_SMA         GetTechAnalysisRequest_IndicatorType = 5 //Simple Moving Average — простое скользящее среднее.
)

// Enum value maps for GetTechAnalysisRequest_IndicatorType.
var (
	GetTechAnalysisRequest_IndicatorType_name = map[int32]string{
		0: "INDICATOR_TYPE_UNSPECIFIED",
		1: "INDICATOR_TYPE_BB",
		2: "INDICATOR_TYPE_EMA",
		3: "INDICATOR_TYPE_RSI",
		4: "INDICATOR_TYPE_MACD",
		5: "INDICATOR_TYPE_SMA",
	}
	GetTechAnalysisRequest_IndicatorType_value = map[string]int32{
		"INDICATOR_TYPE_UNSPECIFIED": 0,
		"INDICATOR_TYPE_BB":          1,
		"INDICATOR_TYPE_EMA":         2,
		"INDICATOR_TYPE_RSI":         3,
		"INDICATOR_TYPE_MACD":        4,
		"INDICATOR_TYPE_SMA":         5,
	}
)

func (x GetTechAnalysisRequest_IndicatorType) Enum() *GetTechAnalysisRequest_IndicatorType {
	p := new(GetTechAnalysisRequest_IndicatorType)
	*p = x
	return p
}

func (x GetTechAnalysisRequest_IndicatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetTechAnalysisRequest_IndicatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_marketdata_proto_enumTypes[12].Descriptor()
}

func (GetTechAnalysisRequest_IndicatorType) Type() protoreflect.EnumType {
	return &file_marketdata_proto_enumTypes[12]
}

func (x GetTechAnalysisRequest_IndicatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetTechAnalysisRequest_IndicatorType.Descriptor instead.
func (GetTechAnalysisRequest_IndicatorType) EnumDescriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 2}
}

// Запрос подписки или отписки на определенные биржевые данные.
type MarketDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MarketDataRequest_SubscribeCandlesRequest
	//	*MarketDataRequest_SubscribeOrderBookRequest
	//	*MarketDataRequest_SubscribeTradesRequest
	//	*MarketDataRequest_SubscribeInfoRequest
	//	*MarketDataRequest_SubscribeLastPriceRequest
	//	*MarketDataRequest_GetMySubscriptions
	//	*MarketDataRequest_Ping
	//	*MarketDataRequest_PingSettings
	Payload       isMarketDataRequest_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataRequest) Reset() {
	*x = MarketDataRequest{}
	mi := &file_marketdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataRequest) ProtoMessage() {}

func (x *MarketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataRequest.ProtoReflect.Descriptor instead.
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{0}
}

func (x *MarketDataRequest) GetPayload() isMarketDataRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeCandlesRequest() *SubscribeCandlesRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_SubscribeCandlesRequest); ok {
			return x.SubscribeCandlesRequest
		}
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeOrderBookRequest() *SubscribeOrderBookRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_SubscribeOrderBookRequest); ok {
			return x.SubscribeOrderBookRequest
		}
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeTradesRequest() *SubscribeTradesRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_SubscribeTradesRequest); ok {
			return x.SubscribeTradesRequest
		}
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeInfoRequest() *SubscribeInfoRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_SubscribeInfoRequest); ok {
			return x.SubscribeInfoRequest
		}
	}
	return nil
}

func (x *MarketDataRequest) GetSubscribeLastPriceRequest() *SubscribeLastPriceRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_SubscribeLastPriceRequest); ok {
			return x.SubscribeLastPriceRequest
		}
	}
	return nil
}

func (x *MarketDataRequest) GetGetMySubscriptions() *GetMySubscriptions {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_GetMySubscriptions); ok {
			return x.GetMySubscriptions
		}
	}
	return nil
}

func (x *MarketDataRequest) GetPing() *PingRequest {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *MarketDataRequest) GetPingSettings() *PingDelaySettings {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataRequest_PingSettings); ok {
			return x.PingSettings
		}
	}
	return nil
}

type isMarketDataRequest_Payload interface {
	isMarketDataRequest_Payload()
}

type MarketDataRequest_SubscribeCandlesRequest struct {
	SubscribeCandlesRequest *SubscribeCandlesRequest `protobuf:"bytes,1,opt,name=subscribe_candles_request,json=subscribeCandlesRequest,proto3,oneof"` //Запрос подписки на свечи.
}

type MarketDataRequest_SubscribeOrderBookRequest struct {
	SubscribeOrderBookRequest *SubscribeOrderBookRequest `protobuf:"bytes,2,opt,name=subscribe_order_book_request,json=subscribeOrderBookRequest,proto3,oneof"` //Запрос подписки на стаканы.
}

type MarketDataRequest_SubscribeTradesRequest struct {
	SubscribeTradesRequest *SubscribeTradesRequest `protobuf:"bytes,3,opt,name=subscribe_trades_request,json=subscribeTradesRequest,proto3,oneof"` //Запрос подписки на ленту обезличенных сделок.
}

type MarketDataRequest_SubscribeInfoRequest struct {
	SubscribeInfoRequest *SubscribeInfoRequest `protobuf:"bytes,4,opt,name=subscribe_info_request,json=subscribeInfoRequest,proto3,oneof"` //Запрос подписки на торговые статусы инструментов.
}

type MarketDataRequest_SubscribeLastPriceRequest struct {
	SubscribeLastPriceRequest *SubscribeLastPriceRequest `protobuf:"bytes,5,opt,name=subscribe_last_price_request,json=subscribeLastPriceRequest,proto3,oneof"` //Запрос подписки на цены последних сделок.
}

type MarketDataRequest_GetMySubscriptions struct {
	GetMySubscriptions *GetMySubscriptions `protobuf:"bytes,6,opt,name=get_my_subscriptions,json=getMySubscriptions,proto3,oneof"` //Запрос своих подписок.
}

type MarketDataRequest_Ping struct {
	Ping *PingRequest `protobuf:"bytes,7,opt,name=ping,proto3,oneof"` //Запрос проверки активности соединения.
}

type MarketDataRequest_PingSettings struct {
	PingSettings *PingDelaySettings `protobuf:"bytes,15,opt,name=ping_settings,json=pingSettings,proto3,oneof"` //Запрос настройки пинга.
}

func (*MarketDataRequest_SubscribeCandlesRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeOrderBookRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeTradesRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeInfoRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_SubscribeLastPriceRequest) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_GetMySubscriptions) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_Ping) isMarketDataRequest_Payload() {}

func (*MarketDataRequest_PingSettings) isMarketDataRequest_Payload() {}

type MarketDataServerSideStreamRequest struct {
	state                     protoimpl.MessageState     `protogen:"open.v1"`
	SubscribeCandlesRequest   *SubscribeCandlesRequest   `protobuf:"bytes,1,opt,name=subscribe_candles_request,json=subscribeCandlesRequest,proto3" json:"subscribe_candles_request,omitempty"`         //Запрос подписки на свечи.
	SubscribeOrderBookRequest *SubscribeOrderBookRequest `protobuf:"bytes,2,opt,name=subscribe_order_book_request,json=subscribeOrderBookRequest,proto3" json:"subscribe_order_book_request,omitempty"` //Запрос подписки на стаканы.
	SubscribeTradesRequest    *SubscribeTradesRequest    `protobuf:"bytes,3,opt,name=subscribe_trades_request,json=subscribeTradesRequest,proto3" json:"subscribe_trades_request,omitempty"`            //Запрос подписки на ленту обезличенных сделок.
	SubscribeInfoRequest      *SubscribeInfoRequest      `protobuf:"bytes,4,opt,name=subscribe_info_request,json=subscribeInfoRequest,proto3" json:"subscribe_info_request,omitempty"`                  //Запрос подписки на торговые статусы инструментов.
	SubscribeLastPriceRequest *SubscribeLastPriceRequest `protobuf:"bytes,5,opt,name=subscribe_last_price_request,json=subscribeLastPriceRequest,proto3" json:"subscribe_last_price_request,omitempty"` //Запрос подписки на цены последних сделок.
	PingSettings              *PingDelaySettings         `protobuf:"bytes,15,opt,name=ping_settings,json=pingSettings,proto3" json:"ping_settings,omitempty"`                                           //Запрос настройки пинга.
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *MarketDataServerSideStreamRequest) Reset() {
	*x = MarketDataServerSideStreamRequest{}
	mi := &file_marketdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataServerSideStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataServerSideStreamRequest) ProtoMessage() {}

func (x *MarketDataServerSideStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataServerSideStreamRequest.ProtoReflect.Descriptor instead.
func (*MarketDataServerSideStreamRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{1}
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeCandlesRequest() *SubscribeCandlesRequest {
	if x != nil {
		return x.SubscribeCandlesRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeOrderBookRequest() *SubscribeOrderBookRequest {
	if x != nil {
		return x.SubscribeOrderBookRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeTradesRequest() *SubscribeTradesRequest {
	if x != nil {
		return x.SubscribeTradesRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeInfoRequest() *SubscribeInfoRequest {
	if x != nil {
		return x.SubscribeInfoRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetSubscribeLastPriceRequest() *SubscribeLastPriceRequest {
	if x != nil {
		return x.SubscribeLastPriceRequest
	}
	return nil
}

func (x *MarketDataServerSideStreamRequest) GetPingSettings() *PingDelaySettings {
	if x != nil {
		return x.PingSettings
	}
	return nil
}

// Пакет биржевой информации по подписке.
type MarketDataResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MarketDataResponse_SubscribeCandlesResponse
	//	*MarketDataResponse_SubscribeOrderBookResponse
	//	*MarketDataResponse_SubscribeTradesResponse
	//	*MarketDataResponse_SubscribeInfoResponse
	//	*MarketDataResponse_Candle
	//	*MarketDataResponse_Trade
	//	*MarketDataResponse_Orderbook
	//	*MarketDataResponse_TradingStatus
	//	*MarketDataResponse_Ping
	//	*MarketDataResponse_SubscribeLastPriceResponse
	//	*MarketDataResponse_LastPrice
	Payload       isMarketDataResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataResponse) Reset() {
	*x = MarketDataResponse{}
	mi := &file_marketdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataResponse) ProtoMessage() {}

func (x *MarketDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataResponse.ProtoReflect.Descriptor instead.
func (*MarketDataResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{2}
}

func (x *MarketDataResponse) GetPayload() isMarketDataResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeCandlesResponse() *SubscribeCandlesResponse {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_SubscribeCandlesResponse); ok {
			return x.SubscribeCandlesResponse
		}
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeOrderBookResponse() *SubscribeOrderBookResponse {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_SubscribeOrderBookResponse); ok {
			return x.SubscribeOrderBookResponse
		}
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeTradesResponse() *SubscribeTradesResponse {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_SubscribeTradesResponse); ok {
			return x.SubscribeTradesResponse
		}
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeInfoResponse() *SubscribeInfoResponse {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_SubscribeInfoResponse); ok {
			return x.SubscribeInfoResponse
		}
	}
	return nil
}

func (x *MarketDataResponse) GetCandle() *Candle {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_Candle); ok {
			return x.Candle
		}
	}
	return nil
}

func (x *MarketDataResponse) GetTrade() *Trade {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_Trade); ok {
			return x.Trade
		}
	}
	return nil
}

func (x *MarketDataResponse) GetOrderbook() *OrderBook {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_Orderbook); ok {
			return x.Orderbook
		}
	}
	return nil
}

func (x *MarketDataResponse) GetTradingStatus() *TradingStatus {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_TradingStatus); ok {
			return x.TradingStatus
		}
	}
	return nil
}

func (x *MarketDataResponse) GetPing() *Ping {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_Ping); ok {
			return x.Ping
		}
	}
	return nil
}

func (x *MarketDataResponse) GetSubscribeLastPriceResponse() *SubscribeLastPriceResponse {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_SubscribeLastPriceResponse); ok {
			return x.SubscribeLastPriceResponse
		}
	}
	return nil
}

func (x *MarketDataResponse) GetLastPrice() *LastPrice {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataResponse_LastPrice); ok {
			return x.LastPrice
		}
	}
	return nil
}

type isMarketDataResponse_Payload interface {
	isMarketDataResponse_Payload()
}

type MarketDataResponse_SubscribeCandlesResponse struct {
	SubscribeCandlesResponse *SubscribeCandlesResponse `protobuf:"bytes,1,opt,name=subscribe_candles_response,json=subscribeCandlesResponse,proto3,oneof"` //Результат подписки на свечи.
}

type MarketDataResponse_SubscribeOrderBookResponse struct {
	SubscribeOrderBookResponse *SubscribeOrderBookResponse `protobuf:"bytes,2,opt,name=subscribe_order_book_response,json=subscribeOrderBookResponse,proto3,oneof"` //Результат подписки на стаканы.
}

type MarketDataResponse_SubscribeTradesResponse struct {
	SubscribeTradesResponse *SubscribeTradesResponse `protobuf:"bytes,3,opt,name=subscribe_trades_response,json=subscribeTradesResponse,proto3,oneof"` //Результат подписки на поток обезличенных сделок.
}

type MarketDataResponse_SubscribeInfoResponse struct {
	SubscribeInfoResponse *SubscribeInfoResponse `protobuf:"bytes,4,opt,name=subscribe_info_response,json=subscribeInfoResponse,proto3,oneof"` //Результат подписки на торговые статусы инструментов.
}

type MarketDataResponse_Candle struct {
	Candle *Candle `protobuf:"bytes,5,opt,name=candle,proto3,oneof"` //Свеча.
}

type MarketDataResponse_Trade struct {
	Trade *Trade `protobuf:"bytes,6,opt,name=trade,proto3,oneof"` //Сделки.
}

type MarketDataResponse_Orderbook struct {
	Orderbook *OrderBook `protobuf:"bytes,7,opt,name=orderbook,proto3,oneof"` //Стакан.
}

type MarketDataResponse_TradingStatus struct {
	TradingStatus *TradingStatus `protobuf:"bytes,8,opt,name=trading_status,json=tradingStatus,proto3,oneof"` //Торговый статус.
}

type MarketDataResponse_Ping struct {
	Ping *Ping `protobuf:"bytes,9,opt,name=ping,proto3,oneof"` //Проверка активности стрима.
}

type MarketDataResponse_SubscribeLastPriceResponse struct {
	SubscribeLastPriceResponse *SubscribeLastPriceResponse `protobuf:"bytes,10,opt,name=subscribe_last_price_response,json=subscribeLastPriceResponse,proto3,oneof"` //Результат подписки на цены последние сделок по инструментам.
}

type MarketDataResponse_LastPrice struct {
	LastPrice *LastPrice `protobuf:"bytes,11,opt,name=last_price,json=lastPrice,proto3,oneof"` //Цена последней сделки.
}

func (*MarketDataResponse_SubscribeCandlesResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeOrderBookResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeTradesResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeInfoResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Candle) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Trade) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Orderbook) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_TradingStatus) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_Ping) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_SubscribeLastPriceResponse) isMarketDataResponse_Payload() {}

func (*MarketDataResponse_LastPrice) isMarketDataResponse_Payload() {}

// subscribeCandles | Изменения статуса подписки на свечи.
type SubscribeCandlesRequest struct {
	state              protoimpl.MessageState          `protogen:"open.v1"`
	SubscriptionAction SubscriptionAction              `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"`               //Изменение статуса подписки.
	Instruments        []*CandleInstrument             `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                                      //Массив инструментов для подписки на свечи.
	WaitingClose       bool                            `protobuf:"varint,3,opt,name=waiting_close,json=waitingClose,proto3" json:"waiting_close,omitempty"`                                                                                               //Флаг ожидания закрытия временного интервала для отправки свечи.
	CandleSourceType   *GetCandlesRequest_CandleSource `protobuf:"varint,9,opt,name=candle_source_type,json=candleSourceType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetCandlesRequest_CandleSource,oneof" json:"candle_source_type,omitempty"` //Источник свечей.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeCandlesRequest) Reset() {
	*x = SubscribeCandlesRequest{}
	mi := &file_marketdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCandlesRequest) ProtoMessage() {}

func (x *SubscribeCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCandlesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeCandlesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeCandlesRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeCandlesRequest) GetInstruments() []*CandleInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *SubscribeCandlesRequest) GetWaitingClose() bool {
	if x != nil {
		return x.WaitingClose
	}
	return false
}

func (x *SubscribeCandlesRequest) GetCandleSourceType() GetCandlesRequest_CandleSource {
	if x != nil && x.CandleSourceType != nil {
		return *x.CandleSourceType
	}
	return GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED
}

// Запрос изменения статус подписки на свечи.
type CandleInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string               `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                          // Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	Interval      SubscriptionInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"` //Интервал свечей. Двухчасовые и четырехчасовые свечи в стриме отсчитываются с 0:00 по UTC.
	InstrumentId  string               `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                      //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CandleInstrument) Reset() {
	*x = CandleInstrument{}
	mi := &file_marketdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandleInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleInstrument) ProtoMessage() {}

func (x *CandleInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleInstrument.ProtoReflect.Descriptor instead.
func (*CandleInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{4}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *CandleInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *CandleInstrument) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *CandleInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статус подписки на свечи.
type SubscribeCandlesResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	TrackingId           string                 `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                               //Уникальный идентификатор запроса. [Подробнее](./grpc#tracking-id).
	CandlesSubscriptions []*CandleSubscription  `protobuf:"bytes,2,rep,name=candles_subscriptions,json=candlesSubscriptions,proto3" json:"candles_subscriptions,omitempty"` //Массив статусов подписки на свечи.
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SubscribeCandlesResponse) Reset() {
	*x = SubscribeCandlesResponse{}
	mi := &file_marketdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCandlesResponse) ProtoMessage() {}

func (x *SubscribeCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCandlesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeCandlesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeCandlesResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeCandlesResponse) GetCandlesSubscriptions() []*CandleSubscription {
	if x != nil {
		return x.CandlesSubscriptions
	}
	return nil
}

// Статус подписки на свечи.
type CandleSubscription struct {
	state              protoimpl.MessageState          `protogen:"open.v1"`
	Figi               string                          `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                                    //FIGI-идентификатор инструмента.
	Interval           SubscriptionInterval            `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"`                                                           //Интервал свечей.
	SubscriptionStatus SubscriptionStatus              `protobuf:"varint,3,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"`               //Статус подписки.
	InstrumentUid      string                          `protobuf:"bytes,4,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                             //UID инструмента.
	WaitingClose       bool                            `protobuf:"varint,5,opt,name=waiting_close,json=waitingClose,proto3" json:"waiting_close,omitempty"`                                                                                               //Флаг ожидания закрытия временного интервала для отправки свечи.
	StreamId           string                          `protobuf:"bytes,6,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                                            //Идентификатор открытого соединения.
	SubscriptionId     string                          `protobuf:"bytes,7,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                                          //Идентификатор подписки в формате `UUID`.
	CandleSourceType   *GetCandlesRequest_CandleSource `protobuf:"varint,9,opt,name=candle_source_type,json=candleSourceType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetCandlesRequest_CandleSource,oneof" json:"candle_source_type,omitempty"` //Источник свечей.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CandleSubscription) Reset() {
	*x = CandleSubscription{}
	mi := &file_marketdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandleSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleSubscription) ProtoMessage() {}

func (x *CandleSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleSubscription.ProtoReflect.Descriptor instead.
func (*CandleSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{6}
}

func (x *CandleSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *CandleSubscription) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *CandleSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *CandleSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *CandleSubscription) GetWaitingClose() bool {
	if x != nil {
		return x.WaitingClose
	}
	return false
}

func (x *CandleSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CandleSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *CandleSubscription) GetCandleSourceType() GetCandlesRequest_CandleSource {
	if x != nil && x.CandleSourceType != nil {
		return *x.CandleSourceType
	}
	return GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED
}

// Запрос на изменение статуса подписки на стаканы.
type SubscribeOrderBookRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*OrderBookInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на стаканы.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeOrderBookRequest) Reset() {
	*x = SubscribeOrderBookRequest{}
	mi := &file_marketdata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookRequest) ProtoMessage() {}

func (x *SubscribeOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookRequest.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeOrderBookRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeOrderBookRequest) GetInstruments() []*OrderBookInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на стаканы.
type OrderBookInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string        `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                    //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	Depth         int32         `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                 //Глубина стакана.
	InstrumentId  string        `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                                //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	OrderBookType OrderBookType `protobuf:"varint,4,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"` //Тип стакана. Значение по умолчанию — `ORDERBOOK_TYPE_ALL`, стакан биржевой и дилера.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookInstrument) Reset() {
	*x = OrderBookInstrument{}
	mi := &file_marketdata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookInstrument) ProtoMessage() {}

func (x *OrderBookInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookInstrument.ProtoReflect.Descriptor instead.
func (*OrderBookInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *OrderBookInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBookInstrument) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBookInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

func (x *OrderBookInstrument) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Результат изменения статуса подписки на стаканы.
type SubscribeOrderBookResponse struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	TrackingId             string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                       //Уникальный идентификатор запроса. [Подробнее](./grpc#tracking-id).
	OrderBookSubscriptions []*OrderBookSubscription `protobuf:"bytes,2,rep,name=order_book_subscriptions,json=orderBookSubscriptions,proto3" json:"order_book_subscriptions,omitempty"` //Массив статусов подписки на стаканы.
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SubscribeOrderBookResponse) Reset() {
	*x = SubscribeOrderBookResponse{}
	mi := &file_marketdata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeOrderBookResponse) ProtoMessage() {}

func (x *SubscribeOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeOrderBookResponse.ProtoReflect.Descriptor instead.
func (*SubscribeOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeOrderBookResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeOrderBookResponse) GetOrderBookSubscriptions() []*OrderBookSubscription {
	if x != nil {
		return x.OrderBookSubscriptions
	}
	return nil
}

// Статус подписки.
type OrderBookSubscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Figi               string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //FIGI-идентификатор инструмента.
	Depth              int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                                   //Глубина стакана.
	SubscriptionStatus SubscriptionStatus     `protobuf:"varint,3,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string                 `protobuf:"bytes,4,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //UID инструмента.
	StreamId           string                 `protobuf:"bytes,5,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения.
	SubscriptionId     string                 `protobuf:"bytes,6,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате `UUID`.
	OrderBookType      OrderBookType          `protobuf:"varint,7,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"`                   //Тип стакана.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *OrderBookSubscription) Reset() {
	*x = OrderBookSubscription{}
	mi := &file_marketdata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSubscription) ProtoMessage() {}

func (x *OrderBookSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSubscription.ProtoReflect.Descriptor instead.
func (*OrderBookSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{10}
}

func (x *OrderBookSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBookSubscription) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBookSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *OrderBookSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderBookSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *OrderBookSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *OrderBookSubscription) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Изменение статуса подписки на поток обезличенных сделок.
type SubscribeTradesRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*TradeInstrument     `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на поток обезличенных сделок.
	TradeSource        TradeSourceType        `protobuf:"varint,3,opt,name=trade_source,json=tradeSource,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_source,omitempty"`                         //Тип источника сделок. Значение по умолчанию — `TRADE_SOURCE_ALL`, все сделки.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeTradesRequest) Reset() {
	*x = SubscribeTradesRequest{}
	mi := &file_marketdata_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTradesRequest) ProtoMessage() {}

func (x *SubscribeTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTradesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTradesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribeTradesRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeTradesRequest) GetInstruments() []*TradeInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *SubscribeTradesRequest) GetTradeSource() TradeSourceType {
	if x != nil {
		return x.TradeSource
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Запрос подписки на поток обезличенных сделок.
type TradeInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated FIGI-идентификатор инструмента. Используйте instrument_id`.
	InstrumentId  string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradeInstrument) Reset() {
	*x = TradeInstrument{}
	mi := &file_marketdata_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeInstrument) ProtoMessage() {}

func (x *TradeInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeInstrument.ProtoReflect.Descriptor instead.
func (*TradeInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *TradeInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradeInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на поток обезличенных сделок.
type SubscribeTradesResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TrackingId         string                 `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                                                //Уникальный идентификатор запроса. [Подробнее](./grpc#tracking-id).
	TradeSubscriptions []*TradeSubscription   `protobuf:"bytes,2,rep,name=trade_subscriptions,json=tradeSubscriptions,proto3" json:"trade_subscriptions,omitempty"`                                        //Массив статусов подписки на поток сделок.
	TradeSource        TradeSourceType        `protobuf:"varint,3,opt,name=trade_source,json=tradeSource,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_source,omitempty"` //Тип источника сделок.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeTradesResponse) Reset() {
	*x = SubscribeTradesResponse{}
	mi := &file_marketdata_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTradesResponse) ProtoMessage() {}

func (x *SubscribeTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTradesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeTradesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{13}
}

func (x *SubscribeTradesResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeTradesResponse) GetTradeSubscriptions() []*TradeSubscription {
	if x != nil {
		return x.TradeSubscriptions
	}
	return nil
}

func (x *SubscribeTradesResponse) GetTradeSource() TradeSourceType {
	if x != nil {
		return x.TradeSource
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Статус подписки.
type TradeSubscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Figi               string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //FIGI-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus     `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string                 `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //UID инструмента.
	StreamId           string                 `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения.
	SubscriptionId     string                 `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TradeSubscription) Reset() {
	*x = TradeSubscription{}
	mi := &file_marketdata_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeSubscription) ProtoMessage() {}

func (x *TradeSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeSubscription.ProtoReflect.Descriptor instead.
func (*TradeSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{14}
}

func (x *TradeSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradeSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *TradeSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *TradeSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *TradeSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Изменение статуса подписки на торговый статус инструмента.
type SubscribeInfoRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*InfoInstrument      `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на торговый статус.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeInfoRequest) Reset() {
	*x = SubscribeInfoRequest{}
	mi := &file_marketdata_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInfoRequest) ProtoMessage() {}

func (x *SubscribeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInfoRequest.ProtoReflect.Descriptor instead.
func (*SubscribeInfoRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeInfoRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeInfoRequest) GetInstruments() []*InfoInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на торговый статус.
type InfoInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated FIGI-идентификатор инструмента. Используйте instrument_id`.
	InstrumentId  string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InfoInstrument) Reset() {
	*x = InfoInstrument{}
	mi := &file_marketdata_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoInstrument) ProtoMessage() {}

func (x *InfoInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoInstrument.ProtoReflect.Descriptor instead.
func (*InfoInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *InfoInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InfoInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на торговый статус.
type SubscribeInfoResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TrackingId        string                 `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                      //Уникальный идентификатор запроса. [Подробнее](./grpc#tracking-id).
	InfoSubscriptions []*InfoSubscription    `protobuf:"bytes,2,rep,name=info_subscriptions,json=infoSubscriptions,proto3" json:"info_subscriptions,omitempty"` //Массив статусов подписки на торговый статус.
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubscribeInfoResponse) Reset() {
	*x = SubscribeInfoResponse{}
	mi := &file_marketdata_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeInfoResponse) ProtoMessage() {}

func (x *SubscribeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeInfoResponse.ProtoReflect.Descriptor instead.
func (*SubscribeInfoResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{17}
}

func (x *SubscribeInfoResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeInfoResponse) GetInfoSubscriptions() []*InfoSubscription {
	if x != nil {
		return x.InfoSubscriptions
	}
	return nil
}

// Статус подписки.
type InfoSubscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Figi               string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //FIGI-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus     `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string                 `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //UID инструмента.
	StreamId           string                 `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения.
	SubscriptionId     string                 `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате UUID.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *InfoSubscription) Reset() {
	*x = InfoSubscription{}
	mi := &file_marketdata_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InfoSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoSubscription) ProtoMessage() {}

func (x *InfoSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoSubscription.ProtoReflect.Descriptor instead.
func (*InfoSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{18}
}

func (x *InfoSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InfoSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *InfoSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *InfoSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *InfoSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Изменение статуса подписки на цену последней сделки по инструменту.
type SubscribeLastPriceRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionAction SubscriptionAction     `protobuf:"varint,1,opt,name=subscription_action,json=subscriptionAction,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionAction" json:"subscription_action,omitempty"` //Изменение статуса подписки.
	Instruments        []*LastPriceInstrument `protobuf:"bytes,2,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                        //Массив инструментов для подписки на цену последней сделки.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubscribeLastPriceRequest) Reset() {
	*x = SubscribeLastPriceRequest{}
	mi := &file_marketdata_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLastPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLastPriceRequest) ProtoMessage() {}

func (x *SubscribeLastPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLastPriceRequest.ProtoReflect.Descriptor instead.
func (*SubscribeLastPriceRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{19}
}

func (x *SubscribeLastPriceRequest) GetSubscriptionAction() SubscriptionAction {
	if x != nil {
		return x.SubscriptionAction
	}
	return SubscriptionAction_SUBSCRIPTION_ACTION_UNSPECIFIED
}

func (x *SubscribeLastPriceRequest) GetInstruments() []*LastPriceInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

// Запрос подписки на последнюю цену.
type LastPriceInstrument struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          string `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                     //Deprecated FIGI-идентификатор инструмента. Используйте instrument_id`.
	InstrumentId  string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastPriceInstrument) Reset() {
	*x = LastPriceInstrument{}
	mi := &file_marketdata_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastPriceInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPriceInstrument) ProtoMessage() {}

func (x *LastPriceInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPriceInstrument.ProtoReflect.Descriptor instead.
func (*LastPriceInstrument) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{20}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *LastPriceInstrument) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPriceInstrument) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Результат изменения статуса подписки на цену последней сделки.
type SubscribeLastPriceResponse struct {
	state                  protoimpl.MessageState   `protogen:"open.v1"`
	TrackingId             string                   `protobuf:"bytes,1,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`                                       //Уникальный идентификатор запроса. [Подробнее](./grpc#tracking-id).
	LastPriceSubscriptions []*LastPriceSubscription `protobuf:"bytes,2,rep,name=last_price_subscriptions,json=lastPriceSubscriptions,proto3" json:"last_price_subscriptions,omitempty"` //Массив статусов подписки на цену последней сделки.
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SubscribeLastPriceResponse) Reset() {
	*x = SubscribeLastPriceResponse{}
	mi := &file_marketdata_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeLastPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeLastPriceResponse) ProtoMessage() {}

func (x *SubscribeLastPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeLastPriceResponse.ProtoReflect.Descriptor instead.
func (*SubscribeLastPriceResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{21}
}

func (x *SubscribeLastPriceResponse) GetTrackingId() string {
	if x != nil {
		return x.TrackingId
	}
	return ""
}

func (x *SubscribeLastPriceResponse) GetLastPriceSubscriptions() []*LastPriceSubscription {
	if x != nil {
		return x.LastPriceSubscriptions
	}
	return nil
}

// Статус подписки на цену последней сделки.
type LastPriceSubscription struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Figi               string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                                      //FIGI-идентификатор инструмента.
	SubscriptionStatus SubscriptionStatus     `protobuf:"varint,2,opt,name=subscription_status,json=subscriptionStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionStatus" json:"subscription_status,omitempty"` //Статус подписки.
	InstrumentUid      string                 `protobuf:"bytes,3,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                               //UID инструмента.
	StreamId           string                 `protobuf:"bytes,4,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                                                              //Идентификатор открытого соединения.
	SubscriptionId     string                 `protobuf:"bytes,5,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`                                                                            //Идентификатор подписки в формате `UUID`.
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LastPriceSubscription) Reset() {
	*x = LastPriceSubscription{}
	mi := &file_marketdata_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastPriceSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPriceSubscription) ProtoMessage() {}

func (x *LastPriceSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPriceSubscription.ProtoReflect.Descriptor instead.
func (*LastPriceSubscription) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{22}
}

func (x *LastPriceSubscription) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPriceSubscription) GetSubscriptionStatus() SubscriptionStatus {
	if x != nil {
		return x.SubscriptionStatus
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_UNSPECIFIED
}

func (x *LastPriceSubscription) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *LastPriceSubscription) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *LastPriceSubscription) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

// Пакет свечей в рамках стрима.
type Candle struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Figi             string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                             //FIGI-идентификатор инструмента.
	Interval         SubscriptionInterval   `protobuf:"varint,2,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.SubscriptionInterval" json:"interval,omitempty"`                                    //Интервал свечи.
	Open             *Quotation             `protobuf:"bytes,3,opt,name=open,proto3" json:"open,omitempty"`                                                                                                             //Цена открытия за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	High             *Quotation             `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`                                                                                                             //Максимальная цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Low              *Quotation             `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`                                                                                                               //Минимальная цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Close            *Quotation             `protobuf:"bytes,6,opt,name=close,proto3" json:"close,omitempty"`                                                                                                           //Цена закрытия за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Volume           int64                  `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`                                                                                                        //Объем сделок в лотах.
	Time             *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`                                                                                                             //Время начала интервала свечи по UTC.
	LastTradeTs      *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=last_trade_ts,json=lastTradeTs,proto3" json:"last_trade_ts,omitempty"`                                                                          //Время последней сделки, вошедшей в свечу по UTC.
	InstrumentUid    string                 `protobuf:"bytes,10,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                     //UID инструмента.
	CandleSourceType CandleSource           `protobuf:"varint,19,opt,name=candle_source_type,json=candleSourceType,proto3,enum=tinkoff.public.invest.api.contract.v1.CandleSource" json:"candle_source_type,omitempty"` //Источник свечей.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Candle) Reset() {
	*x = Candle{}
	mi := &file_marketdata_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{23}
}

func (x *Candle) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Candle) GetInterval() SubscriptionInterval {
	if x != nil {
		return x.Interval
	}
	return SubscriptionInterval_SUBSCRIPTION_INTERVAL_UNSPECIFIED
}

func (x *Candle) GetOpen() *Quotation {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *Candle) GetHigh() *Quotation {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *Candle) GetLow() *Quotation {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Candle) GetClose() *Quotation {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *Candle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Candle) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Candle) GetLastTradeTs() *timestamp.Timestamp {
	if x != nil {
		return x.LastTradeTs
	}
	return nil
}

func (x *Candle) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *Candle) GetCandleSourceType() CandleSource {
	if x != nil {
		return x.CandleSourceType
	}
	return CandleSource_CANDLE_SOURCE_UNSPECIFIED
}

// Пакет стаканов в рамках стрима.
type OrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                     //FIGI-идентификатор инструмента.
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                                                                                  //Глубина стакана.
	IsConsistent  bool                   `protobuf:"varint,3,opt,name=is_consistent,json=isConsistent,proto3" json:"is_consistent,omitempty"`                                                                //Флаг консистентности стакана. **false** — не все заявки попали в стакан из-за сетевых задержек или нарушения порядка доставки.
	Bids          []*Order               `protobuf:"bytes,4,rep,name=bids,proto3" json:"bids,omitempty"`                                                                                                     //Массив предложений.
	Asks          []*Order               `protobuf:"bytes,5,rep,name=asks,proto3" json:"asks,omitempty"`                                                                                                     //Массив спроса.
	Time          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     //Время формирования стакана в часовом поясе UTC по времени биржи.
	LimitUp       *Quotation             `protobuf:"bytes,7,opt,name=limit_up,json=limitUp,proto3" json:"limit_up,omitempty"`                                                                                //Верхний лимит цены за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	LimitDown     *Quotation             `protobuf:"bytes,8,opt,name=limit_down,json=limitDown,proto3" json:"limit_down,omitempty"`                                                                          //Нижний лимит цены за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	InstrumentUid string                 `protobuf:"bytes,9,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                              //UID инструмента.
	OrderBookType OrderBookType          `protobuf:"varint,10,opt,name=order_book_type,json=orderBookType,proto3,enum=tinkoff.public.invest.api.contract.v1.OrderBookType" json:"order_book_type,omitempty"` //Тип стакана.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_marketdata_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{24}
}

func (x *OrderBook) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *OrderBook) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *OrderBook) GetIsConsistent() bool {
	if x != nil {
		return x.IsConsistent
	}
	return false
}

func (x *OrderBook) GetBids() []*Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBook) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *OrderBook) GetLimitUp() *Quotation {
	if x != nil {
		return x.LimitUp
	}
	return nil
}

func (x *OrderBook) GetLimitDown() *Quotation {
	if x != nil {
		return x.LimitDown
	}
	return nil
}

func (x *OrderBook) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *OrderBook) GetOrderBookType() OrderBookType {
	if x != nil {
		return x.OrderBookType
	}
	return OrderBookType_ORDERBOOK_TYPE_UNSPECIFIED
}

// Массив предложений/спроса.
type Order struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         *Quotation             `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`        //Цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"` //Количество в лотах.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Order) Reset() {
	*x = Order{}
	mi := &file_marketdata_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{25}
}

func (x *Order) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Order) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Информация о сделке.
type Trade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                              //FIGI-идентификатор инструмента.
	Direction     TradeDirection         `protobuf:"varint,2,opt,name=direction,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeDirection" json:"direction,omitempty"`                         //Направление сделки.
	Price         *Quotation             `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`                                                                                            //Цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Quantity      int64                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                     //Количество лотов.
	Time          *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`                                                                                              //Время сделки в часовом поясе UTC по времени биржи.
	InstrumentUid string                 `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                       //UID инструмента.
	TradeSource   TradeSourceType        `protobuf:"varint,7,opt,name=trade_source,json=tradeSource,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_source,omitempty"` //Тип источника сделки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_marketdata_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{26}
}

func (x *Trade) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *Trade) GetDirection() TradeDirection {
	if x != nil {
		return x.Direction
	}
	return TradeDirection_TRADE_DIRECTION_UNSPECIFIED
}

func (x *Trade) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Trade) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Trade) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *Trade) GetTradeSource() TradeSourceType {
	if x != nil {
		return x.TradeSource
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Пакет изменения торгового статуса.
type TradingStatus struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Figi                     string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          //FIGI-идентификатор инструмента.
	TradingStatus            SecurityTradingStatus  `protobuf:"varint,2,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Статус торговли инструментом.
	Time                     *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                          //Время изменения торгового статуса по UTC.
	LimitOrderAvailableFlag  bool                   `protobuf:"varint,4,opt,name=limit_order_available_flag,json=limitOrderAvailableFlag,proto3" json:"limit_order_available_flag,omitempty"`                                //Признак доступности выставления лимитной заявки по инструменту.
	MarketOrderAvailableFlag bool                   `protobuf:"varint,5,opt,name=market_order_available_flag,json=marketOrderAvailableFlag,proto3" json:"market_order_available_flag,omitempty"`                             //Признак доступности выставления рыночной заявки по инструменту.
	InstrumentUid            string                 `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //UID инструмента.
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TradingStatus) Reset() {
	*x = TradingStatus{}
	mi := &file_marketdata_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingStatus) ProtoMessage() {}

func (x *TradingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingStatus.ProtoReflect.Descriptor instead.
func (*TradingStatus) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{27}
}

func (x *TradingStatus) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *TradingStatus) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *TradingStatus) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TradingStatus) GetLimitOrderAvailableFlag() bool {
	if x != nil {
		return x.LimitOrderAvailableFlag
	}
	return false
}

func (x *TradingStatus) GetMarketOrderAvailableFlag() bool {
	if x != nil {
		return x.MarketOrderAvailableFlag
	}
	return false
}

func (x *TradingStatus) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос исторических свечей.
type GetCandlesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi             *string                         `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                                                                                              //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	From             *timestamp.Timestamp            `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                                                                                                                    //Начало запрашиваемого периода по UTC.
	To               *timestamp.Timestamp            `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                                                                                                                        //Окончание запрашиваемого периода по UTC.
	Interval         CandleInterval                  `protobuf:"varint,4,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.CandleInterval" json:"interval,omitempty"`                                                                 //Интервал запрошенных свечей.
	InstrumentId     *string                         `protobuf:"bytes,5,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"`                                                                                          //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	CandleSourceType *GetCandlesRequest_CandleSource `protobuf:"varint,7,opt,name=candle_source_type,json=candleSourceType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetCandlesRequest_CandleSource,oneof" json:"candle_source_type,omitempty"` //Тип источника свечи.
	Limit            *int32                          `protobuf:"varint,10,opt,name=limit,proto3,oneof" json:"limit,omitempty"`                                                                                                                          //Максимальное количество свечей в ответе.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetCandlesRequest) Reset() {
	*x = GetCandlesRequest{}
	mi := &file_marketdata_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesRequest) ProtoMessage() {}

func (x *GetCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesRequest.ProtoReflect.Descriptor instead.
func (*GetCandlesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{28}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetCandlesRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetCandlesRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetCandlesRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetCandlesRequest) GetInterval() CandleInterval {
	if x != nil {
		return x.Interval
	}
	return CandleInterval_CANDLE_INTERVAL_UNSPECIFIED
}

func (x *GetCandlesRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *GetCandlesRequest) GetCandleSourceType() GetCandlesRequest_CandleSource {
	if x != nil && x.CandleSourceType != nil {
		return *x.CandleSourceType
	}
	return GetCandlesRequest_CANDLE_SOURCE_UNSPECIFIED
}

func (x *GetCandlesRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// Список свечей.
type GetCandlesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Candles       []*HistoricCandle      `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"` //Массив свечей.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCandlesResponse) Reset() {
	*x = GetCandlesResponse{}
	mi := &file_marketdata_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesResponse) ProtoMessage() {}

func (x *GetCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesResponse.ProtoReflect.Descriptor instead.
func (*GetCandlesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{29}
}

func (x *GetCandlesResponse) GetCandles() []*HistoricCandle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Информация о свече.
type HistoricCandle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Open          *Quotation             `protobuf:"bytes,1,opt,name=open,proto3" json:"open,omitempty"`                                                                                              //Цена открытия за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	High          *Quotation             `protobuf:"bytes,2,opt,name=high,proto3" json:"high,omitempty"`                                                                                              //Максимальная цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Low           *Quotation             `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`                                                                                                //Минимальная цена за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Close         *Quotation             `protobuf:"bytes,4,opt,name=close,proto3" json:"close,omitempty"`                                                                                            //Цена закрытия за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Volume        int64                  `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`                                                                                         //Объем торгов в лотах.
	Time          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`                                                                                              //Время свечи в часовом поясе UTC.
	IsComplete    bool                   `protobuf:"varint,7,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`                                                               //Признак завершенности свечи. **false** — свеча за текущие интервал еще сформирована не полностью.
	CandleSource  CandleSource           `protobuf:"varint,9,opt,name=candle_source,json=candleSource,proto3,enum=tinkoff.public.invest.api.contract.v1.CandleSource" json:"candle_source,omitempty"` //Тип источника свечи
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoricCandle) Reset() {
	*x = HistoricCandle{}
	mi := &file_marketdata_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricCandle) ProtoMessage() {}

func (x *HistoricCandle) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricCandle.ProtoReflect.Descriptor instead.
func (*HistoricCandle) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{30}
}

func (x *HistoricCandle) GetOpen() *Quotation {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *HistoricCandle) GetHigh() *Quotation {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *HistoricCandle) GetLow() *Quotation {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *HistoricCandle) GetClose() *Quotation {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *HistoricCandle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *HistoricCandle) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HistoricCandle) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *HistoricCandle) GetCandleSource() CandleSource {
	if x != nil {
		return x.CandleSource
	}
	return CandleSource_CANDLE_SOURCE_UNSPECIFIED
}

// Запрос получения цен последних сделок.
type GetLastPricesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi             []string          `protobuf:"bytes,1,rep,name=figi,proto3" json:"figi,omitempty"`                                                                                                                    //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	InstrumentId     []string          `protobuf:"bytes,2,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"`                                                                                //Массив идентификаторов инструмента. Принимает значения `figi` или `instrument_uid`.
	LastPriceType    LastPriceType     `protobuf:"varint,3,opt,name=last_price_type,json=lastPriceType,proto3,enum=tinkoff.public.invest.api.contract.v1.LastPriceType" json:"last_price_type,omitempty"`                 //Тип запрашиваемой последней цены.
	InstrumentStatus *InstrumentStatus `protobuf:"varint,9,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentStatus,oneof" json:"instrument_status,omitempty"` //Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetLastPricesRequest) Reset() {
	*x = GetLastPricesRequest{}
	mi := &file_marketdata_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastPricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPricesRequest) ProtoMessage() {}

func (x *GetLastPricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPricesRequest.ProtoReflect.Descriptor instead.
func (*GetLastPricesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{31}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetLastPricesRequest) GetFigi() []string {
	if x != nil {
		return x.Figi
	}
	return nil
}

func (x *GetLastPricesRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

func (x *GetLastPricesRequest) GetLastPriceType() LastPriceType {
	if x != nil {
		return x.LastPriceType
	}
	return LastPriceType_LAST_PRICE_UNSPECIFIED
}

func (x *GetLastPricesRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil && x.InstrumentStatus != nil {
		return *x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

// Список цен последних сделок.
type GetLastPricesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastPrices    []*LastPrice           `protobuf:"bytes,1,rep,name=last_prices,json=lastPrices,proto3" json:"last_prices,omitempty"` //Массив цен последних сделок.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastPricesResponse) Reset() {
	*x = GetLastPricesResponse{}
	mi := &file_marketdata_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastPricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastPricesResponse) ProtoMessage() {}

func (x *GetLastPricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastPricesResponse.ProtoReflect.Descriptor instead.
func (*GetLastPricesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{32}
}

func (x *GetLastPricesResponse) GetLastPrices() []*LastPrice {
	if x != nil {
		return x.LastPrices
	}
	return nil
}

// Информация о цене последней сделки.
type LastPrice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                     //FIGI инструмента.
	Price         *Quotation             `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`                                                                                                   //Цена последней сделки за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	Time          *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`                                                                                                     //Время получения последней цены в часовом поясе UTC по времени биржи.
	InstrumentUid string                 `protobuf:"bytes,11,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                             //UID инструмента.
	LastPriceType LastPriceType          `protobuf:"varint,12,opt,name=last_price_type,json=lastPriceType,proto3,enum=tinkoff.public.invest.api.contract.v1.LastPriceType" json:"last_price_type,omitempty"` //Тип последней цены.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LastPrice) Reset() {
	*x = LastPrice{}
	mi := &file_marketdata_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPrice) ProtoMessage() {}

func (x *LastPrice) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPrice.ProtoReflect.Descriptor instead.
func (*LastPrice) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{33}
}

func (x *LastPrice) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *LastPrice) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *LastPrice) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *LastPrice) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *LastPrice) GetLastPriceType() LastPriceType {
	if x != nil {
		return x.LastPriceType
	}
	return LastPriceType_LAST_PRICE_UNSPECIFIED
}

// Запрос стакана.
type GetOrderBookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          *string `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                     //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	Depth         int32   `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                        //Глубина стакана.
	InstrumentId  *string `protobuf:"bytes,3,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderBookRequest) Reset() {
	*x = GetOrderBookRequest{}
	mi := &file_marketdata_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookRequest) ProtoMessage() {}

func (x *GetOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookRequest.ProtoReflect.Descriptor instead.
func (*GetOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{34}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetOrderBookRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetOrderBookRequest) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetOrderBookRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

// Информация о стакане.
type GetOrderBookResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Figi          string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                        //FIGI-идентификатор инструмента.
	Depth         int32                  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`                                     //Глубина стакана.
	Bids          []*Order               `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`                                        //Множество пар значений на покупку.
	Asks          []*Order               `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`                                        //Множество пар значений на продажу.
	LastPrice     *Quotation             `protobuf:"bytes,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`             //Цена последней сделки за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	ClosePrice    *Quotation             `protobuf:"bytes,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`          //Цена закрытия за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	LimitUp       *Quotation             `protobuf:"bytes,7,opt,name=limit_up,json=limitUp,proto3" json:"limit_up,omitempty"`                   //Верхний лимит цены за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	LimitDown     *Quotation             `protobuf:"bytes,8,opt,name=limit_down,json=limitDown,proto3" json:"limit_down,omitempty"`             //Нижний лимит цены за 1 инструмент. Чтобы получить стоимость лота, нужно умножить на лотность инструмента. [Подробнее про перевод цен в валюту](./faq_marketdata/#_15).
	LastPriceTs   *timestamp.Timestamp   `protobuf:"bytes,21,opt,name=last_price_ts,json=lastPriceTs,proto3" json:"last_price_ts,omitempty"`    //Время получения цены последней сделки.
	ClosePriceTs  *timestamp.Timestamp   `protobuf:"bytes,22,opt,name=close_price_ts,json=closePriceTs,proto3" json:"close_price_ts,omitempty"` //Время получения цены закрытия.
	OrderbookTs   *timestamp.Timestamp   `protobuf:"bytes,23,opt,name=orderbook_ts,json=orderbookTs,proto3" json:"orderbook_ts,omitempty"`      //Время формирования стакана на бирже.
	InstrumentUid string                 `protobuf:"bytes,9,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"` //UID инструмента.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderBookResponse) Reset() {
	*x = GetOrderBookResponse{}
	mi := &file_marketdata_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookResponse) ProtoMessage() {}

func (x *GetOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookResponse.ProtoReflect.Descriptor instead.
func (*GetOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{35}
}

func (x *GetOrderBookResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetOrderBookResponse) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *GetOrderBookResponse) GetBids() []*Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *GetOrderBookResponse) GetAsks() []*Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *GetOrderBookResponse) GetLastPrice() *Quotation {
	if x != nil {
		return x.LastPrice
	}
	return nil
}

func (x *GetOrderBookResponse) GetClosePrice() *Quotation {
	if x != nil {
		return x.ClosePrice
	}
	return nil
}

func (x *GetOrderBookResponse) GetLimitUp() *Quotation {
	if x != nil {
		return x.LimitUp
	}
	return nil
}

func (x *GetOrderBookResponse) GetLimitDown() *Quotation {
	if x != nil {
		return x.LimitDown
	}
	return nil
}

func (x *GetOrderBookResponse) GetLastPriceTs() *timestamp.Timestamp {
	if x != nil {
		return x.LastPriceTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetClosePriceTs() *timestamp.Timestamp {
	if x != nil {
		return x.ClosePriceTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetOrderbookTs() *timestamp.Timestamp {
	if x != nil {
		return x.OrderbookTs
	}
	return nil
}

func (x *GetOrderBookResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

// Запрос получения торгового статуса.
type GetTradingStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          *string `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                     //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	InstrumentId  *string `protobuf:"bytes,2,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTradingStatusRequest) Reset() {
	*x = GetTradingStatusRequest{}
	mi := &file_marketdata_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTradingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusRequest) ProtoMessage() {}

func (x *GetTradingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTradingStatusRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{36}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetTradingStatusRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetTradingStatusRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

// Запрос получения торгового статуса.
type GetTradingStatusesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  []string               `protobuf:"bytes,1,rep,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTradingStatusesRequest) Reset() {
	*x = GetTradingStatusesRequest{}
	mi := &file_marketdata_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTradingStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusesRequest) ProtoMessage() {}

func (x *GetTradingStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusesRequest.ProtoReflect.Descriptor instead.
func (*GetTradingStatusesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{37}
}

func (x *GetTradingStatusesRequest) GetInstrumentId() []string {
	if x != nil {
		return x.InstrumentId
	}
	return nil
}

// Информация о торговом статусе.
type GetTradingStatusesResponse struct {
	state           protoimpl.MessageState      `protogen:"open.v1"`
	TradingStatuses []*GetTradingStatusResponse `protobuf:"bytes,1,rep,name=trading_statuses,json=tradingStatuses,proto3" json:"trading_statuses,omitempty"` //Массив информации о торговых статусах.
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTradingStatusesResponse) Reset() {
	*x = GetTradingStatusesResponse{}
	mi := &file_marketdata_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTradingStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusesResponse) ProtoMessage() {}

func (x *GetTradingStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusesResponse.ProtoReflect.Descriptor instead.
func (*GetTradingStatusesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{38}
}

func (x *GetTradingStatusesResponse) GetTradingStatuses() []*GetTradingStatusResponse {
	if x != nil {
		return x.TradingStatuses
	}
	return nil
}

// Информация о торговом статусе.
type GetTradingStatusResponse struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Figi                        string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                                                                          //FIGI-идентификатор инструмента.
	TradingStatus               SecurityTradingStatus  `protobuf:"varint,2,opt,name=trading_status,json=tradingStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.SecurityTradingStatus" json:"trading_status,omitempty"` //Статус торговли инструментом.
	LimitOrderAvailableFlag     bool                   `protobuf:"varint,3,opt,name=limit_order_available_flag,json=limitOrderAvailableFlag,proto3" json:"limit_order_available_flag,omitempty"`                                //Признак доступности выставления лимитной заявки по инструменту.
	MarketOrderAvailableFlag    bool                   `protobuf:"varint,4,opt,name=market_order_available_flag,json=marketOrderAvailableFlag,proto3" json:"market_order_available_flag,omitempty"`                             //Признак доступности выставления рыночной заявки по инструменту.
	ApiTradeAvailableFlag       bool                   `protobuf:"varint,5,opt,name=api_trade_available_flag,json=apiTradeAvailableFlag,proto3" json:"api_trade_available_flag,omitempty"`                                      //Признак доступности торгов через API.
	InstrumentUid               string                 `protobuf:"bytes,6,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                   //UID инструмента.
	BestpriceOrderAvailableFlag bool                   `protobuf:"varint,8,opt,name=bestprice_order_available_flag,json=bestpriceOrderAvailableFlag,proto3" json:"bestprice_order_available_flag,omitempty"`                    //Признак доступности завяки по лучшей цене.
	OnlyBestPrice               bool                   `protobuf:"varint,9,opt,name=only_best_price,json=onlyBestPrice,proto3" json:"only_best_price,omitempty"`                                                                //Признак доступности только заявки по лучшей цене.
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *GetTradingStatusResponse) Reset() {
	*x = GetTradingStatusResponse{}
	mi := &file_marketdata_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTradingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTradingStatusResponse) ProtoMessage() {}

func (x *GetTradingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTradingStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTradingStatusResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{39}
}

func (x *GetTradingStatusResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *GetTradingStatusResponse) GetTradingStatus() SecurityTradingStatus {
	if x != nil {
		return x.TradingStatus
	}
	return SecurityTradingStatus_SECURITY_TRADING_STATUS_UNSPECIFIED
}

func (x *GetTradingStatusResponse) GetLimitOrderAvailableFlag() bool {
	if x != nil {
		return x.LimitOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetMarketOrderAvailableFlag() bool {
	if x != nil {
		return x.MarketOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetApiTradeAvailableFlag() bool {
	if x != nil {
		return x.ApiTradeAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *GetTradingStatusResponse) GetBestpriceOrderAvailableFlag() bool {
	if x != nil {
		return x.BestpriceOrderAvailableFlag
	}
	return false
}

func (x *GetTradingStatusResponse) GetOnlyBestPrice() bool {
	if x != nil {
		return x.OnlyBestPrice
	}
	return false
}

// Запрос обезличенных сделок за последний час.
type GetLastTradesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in marketdata.proto.
	Figi          *string              `protobuf:"bytes,1,opt,name=figi,proto3,oneof" json:"figi,omitempty"`                                                                                        //Deprecated FIGI-идентификатор инструмента. Используйте `instrument_id`.
	From          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                                                                              //Начало запрашиваемого периода по UTC.
	To            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                                                                                                  //Окончание запрашиваемого периода по UTC.
	InstrumentId  *string              `protobuf:"bytes,4,opt,name=instrument_id,json=instrumentId,proto3,oneof" json:"instrument_id,omitempty"`                                                    //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	TradeSource   TradeSourceType      `protobuf:"varint,5,opt,name=trade_source,json=tradeSource,proto3,enum=tinkoff.public.invest.api.contract.v1.TradeSourceType" json:"trade_source,omitempty"` //Тип источника сделок. Значение по умолчанию — `TRADE_SOURCE_ALL`, все сделки.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastTradesRequest) Reset() {
	*x = GetLastTradesRequest{}
	mi := &file_marketdata_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastTradesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTradesRequest) ProtoMessage() {}

func (x *GetLastTradesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTradesRequest.ProtoReflect.Descriptor instead.
func (*GetLastTradesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{40}
}

// Deprecated: Marked as deprecated in marketdata.proto.
func (x *GetLastTradesRequest) GetFigi() string {
	if x != nil && x.Figi != nil {
		return *x.Figi
	}
	return ""
}

func (x *GetLastTradesRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetLastTradesRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetLastTradesRequest) GetInstrumentId() string {
	if x != nil && x.InstrumentId != nil {
		return *x.InstrumentId
	}
	return ""
}

func (x *GetLastTradesRequest) GetTradeSource() TradeSourceType {
	if x != nil {
		return x.TradeSource
	}
	return TradeSourceType_TRADE_SOURCE_UNSPECIFIED
}

// Обезличенных сделок за последний час.
type GetLastTradesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        []*Trade               `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty"` //Массив сделок.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLastTradesResponse) Reset() {
	*x = GetLastTradesResponse{}
	mi := &file_marketdata_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLastTradesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTradesResponse) ProtoMessage() {}

func (x *GetLastTradesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTradesResponse.ProtoReflect.Descriptor instead.
func (*GetLastTradesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{41}
}

func (x *GetLastTradesResponse) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

// Запрос активных подписок. Возвращает по одному сообщению на каждый тип активных подписок — `SubscribeLastPriceResponse`, `SubscribeInfoResponse`, `SubscribeTradesResponse`, `SubscribeOrderBookResponse`, `SubscribeCandlesResponse`.
type GetMySubscriptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMySubscriptions) Reset() {
	*x = GetMySubscriptions{}
	mi := &file_marketdata_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMySubscriptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMySubscriptions) ProtoMessage() {}

func (x *GetMySubscriptions) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMySubscriptions.ProtoReflect.Descriptor instead.
func (*GetMySubscriptions) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{42}
}

// Запрос цен закрытия торговой сессии по инструментам.
type GetClosePricesRequest struct {
	state            protoimpl.MessageState         `protogen:"open.v1"`
	Instruments      []*InstrumentClosePriceRequest `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`                                                                                                      //Массив по инструментам.
	InstrumentStatus *InstrumentStatus              `protobuf:"varint,9,opt,name=instrument_status,json=instrumentStatus,proto3,enum=tinkoff.public.invest.api.contract.v1.InstrumentStatus,oneof" json:"instrument_status,omitempty"` //Статус запрашиваемых инструментов. [Возможные значения](#instrumentstatus).
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetClosePricesRequest) Reset() {
	*x = GetClosePricesRequest{}
	mi := &file_marketdata_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClosePricesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosePricesRequest) ProtoMessage() {}

func (x *GetClosePricesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosePricesRequest.ProtoReflect.Descriptor instead.
func (*GetClosePricesRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{43}
}

func (x *GetClosePricesRequest) GetInstruments() []*InstrumentClosePriceRequest {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *GetClosePricesRequest) GetInstrumentStatus() InstrumentStatus {
	if x != nil && x.InstrumentStatus != nil {
		return *x.InstrumentStatus
	}
	return InstrumentStatus_INSTRUMENT_STATUS_UNSPECIFIED
}

// Запрос цен закрытия торговой сессии по инструменту.
type InstrumentClosePriceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InstrumentId  string                 `protobuf:"bytes,1,opt,name=instrument_id,json=instrumentId,proto3" json:"instrument_id,omitempty"` //Идентификатор инструмента. Принимает значение `figi` или `instrument_uid`.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstrumentClosePriceRequest) Reset() {
	*x = InstrumentClosePriceRequest{}
	mi := &file_marketdata_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentClosePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentClosePriceRequest) ProtoMessage() {}

func (x *InstrumentClosePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentClosePriceRequest.ProtoReflect.Descriptor instead.
func (*InstrumentClosePriceRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{44}
}

func (x *InstrumentClosePriceRequest) GetInstrumentId() string {
	if x != nil {
		return x.InstrumentId
	}
	return ""
}

// Цены закрытия торговой сессии по инструментам.
type GetClosePricesResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	ClosePrices   []*InstrumentClosePriceResponse `protobuf:"bytes,1,rep,name=close_prices,json=closePrices,proto3" json:"close_prices,omitempty"` //Массив по инструментам.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClosePricesResponse) Reset() {
	*x = GetClosePricesResponse{}
	mi := &file_marketdata_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClosePricesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClosePricesResponse) ProtoMessage() {}

func (x *GetClosePricesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClosePricesResponse.ProtoReflect.Descriptor instead.
func (*GetClosePricesResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{45}
}

func (x *GetClosePricesResponse) GetClosePrices() []*InstrumentClosePriceResponse {
	if x != nil {
		return x.ClosePrices
	}
	return nil
}

// Цена закрытия торговой сессии по инструменту.
type InstrumentClosePriceResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Figi                string                 `protobuf:"bytes,1,opt,name=figi,proto3" json:"figi,omitempty"`                                                             //FIGI инструмента.
	InstrumentUid       string                 `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                      //UID инструмента.
	Price               *Quotation             `protobuf:"bytes,11,opt,name=price,proto3" json:"price,omitempty"`                                                          //Цена закрытия торговой сессии.
	EveningSessionPrice *Quotation             `protobuf:"bytes,12,opt,name=evening_session_price,json=eveningSessionPrice,proto3" json:"evening_session_price,omitempty"` //Цена последней сделки с вечерней сессии. Цена публикуется биржей по торговым дням и в нерабочие дни не обновляется.
	Time                *timestamp.Timestamp   `protobuf:"bytes,21,opt,name=time,proto3" json:"time,omitempty"`                                                            //Дата совершения торгов.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *InstrumentClosePriceResponse) Reset() {
	*x = InstrumentClosePriceResponse{}
	mi := &file_marketdata_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentClosePriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentClosePriceResponse) ProtoMessage() {}

func (x *InstrumentClosePriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentClosePriceResponse.ProtoReflect.Descriptor instead.
func (*InstrumentClosePriceResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{46}
}

func (x *InstrumentClosePriceResponse) GetFigi() string {
	if x != nil {
		return x.Figi
	}
	return ""
}

func (x *InstrumentClosePriceResponse) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *InstrumentClosePriceResponse) GetPrice() *Quotation {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *InstrumentClosePriceResponse) GetEveningSessionPrice() *Quotation {
	if x != nil {
		return x.EveningSessionPrice
	}
	return nil
}

func (x *InstrumentClosePriceResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type GetTechAnalysisRequest struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	IndicatorType GetTechAnalysisRequest_IndicatorType     `protobuf:"varint,1,opt,name=indicator_type,json=indicatorType,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_IndicatorType" json:"indicator_type,omitempty"` //Тип технического индикатора.
	InstrumentUid string                                   `protobuf:"bytes,2,opt,name=instrument_uid,json=instrumentUid,proto3" json:"instrument_uid,omitempty"`                                                                                  //UID инструмента.
	From          *timestamp.Timestamp                     `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                                                                                                                         //Начало запрашиваемого периода по UTC.
	To            *timestamp.Timestamp                     `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                                                                                                                             //Окончание запрашиваемого периода по UTC.
	Interval      GetTechAnalysisRequest_IndicatorInterval `protobuf:"varint,5,opt,name=interval,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_IndicatorInterval" json:"interval,omitempty"`                            //Интервал, за который рассчитывается индикатор.
	TypeOfPrice   GetTechAnalysisRequest_TypeOfPrice       `protobuf:"varint,6,opt,name=type_of_price,json=typeOfPrice,proto3,enum=tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest_TypeOfPrice" json:"type_of_price,omitempty"`       //Тип цены, который используется при расчете индикатора.
	Length        int32                                    `protobuf:"varint,7,opt,name=length,proto3" json:"length,omitempty"`                                                                                                                    //Торговый период, за который рассчитывается индикатор.
	Deviation     *GetTechAnalysisRequest_Deviation        `protobuf:"bytes,8,opt,name=deviation,proto3" json:"deviation,omitempty"`                                                                                                               //Параметры отклонения.
	Smoothing     *GetTechAnalysisRequest_Smoothing        `protobuf:"bytes,9,opt,name=smoothing,proto3" json:"smoothing,omitempty"`                                                                                                               //Параметры сглаживания.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechAnalysisRequest) Reset() {
	*x = GetTechAnalysisRequest{}
	mi := &file_marketdata_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest) ProtoMessage() {}

func (x *GetTechAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47}
}

func (x *GetTechAnalysisRequest) GetIndicatorType() GetTechAnalysisRequest_IndicatorType {
	if x != nil {
		return x.IndicatorType
	}
	return GetTechAnalysisRequest_INDICATOR_TYPE_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetInstrumentUid() string {
	if x != nil {
		return x.InstrumentUid
	}
	return ""
}

func (x *GetTechAnalysisRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetInterval() GetTechAnalysisRequest_IndicatorInterval {
	if x != nil {
		return x.Interval
	}
	return GetTechAnalysisRequest_INDICATOR_INTERVAL_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetTypeOfPrice() GetTechAnalysisRequest_TypeOfPrice {
	if x != nil {
		return x.TypeOfPrice
	}
	return GetTechAnalysisRequest_TYPE_OF_PRICE_UNSPECIFIED
}

func (x *GetTechAnalysisRequest) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *GetTechAnalysisRequest) GetDeviation() *GetTechAnalysisRequest_Deviation {
	if x != nil {
		return x.Deviation
	}
	return nil
}

func (x *GetTechAnalysisRequest) GetSmoothing() *GetTechAnalysisRequest_Smoothing {
	if x != nil {
		return x.Smoothing
	}
	return nil
}

type GetTechAnalysisResponse struct {
	state               protoimpl.MessageState                      `protogen:"open.v1"`
	TechnicalIndicators []*GetTechAnalysisResponse_TechAnalysisItem `protobuf:"bytes,1,rep,name=technical_indicators,json=technicalIndicators,proto3" json:"technical_indicators,omitempty"` //Массив значений результатов технического анализа.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetTechAnalysisResponse) Reset() {
	*x = GetTechAnalysisResponse{}
	mi := &file_marketdata_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisResponse) ProtoMessage() {}

func (x *GetTechAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisResponse.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{48}
}

func (x *GetTechAnalysisResponse) GetTechnicalIndicators() []*GetTechAnalysisResponse_TechAnalysisItem {
	if x != nil {
		return x.TechnicalIndicators
	}
	return nil
}

type GetTechAnalysisRequest_Smoothing struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FastLength      int32                  `protobuf:"varint,1,opt,name=fast_length,json=fastLength,proto3" json:"fast_length,omitempty"`                //Короткий период сглаживания для первой экспоненциальной скользящей средней (EMA).
	SlowLength      int32                  `protobuf:"varint,2,opt,name=slow_length,json=slowLength,proto3" json:"slow_length,omitempty"`                //Длинный период сглаживания для второй экспоненциальной скользящей средней (EMA).
	SignalSmoothing int32                  `protobuf:"varint,3,opt,name=signal_smoothing,json=signalSmoothing,proto3" json:"signal_smoothing,omitempty"` //Период сглаживания для третьей экспоненциальной скользящей средней (EMA)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetTechAnalysisRequest_Smoothing) Reset() {
	*x = GetTechAnalysisRequest_Smoothing{}
	mi := &file_marketdata_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechAnalysisRequest_Smoothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest_Smoothing) ProtoMessage() {}

func (x *GetTechAnalysisRequest_Smoothing) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest_Smoothing.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest_Smoothing) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 0}
}

func (x *GetTechAnalysisRequest_Smoothing) GetFastLength() int32 {
	if x != nil {
		return x.FastLength
	}
	return 0
}

func (x *GetTechAnalysisRequest_Smoothing) GetSlowLength() int32 {
	if x != nil {
		return x.SlowLength
	}
	return 0
}

func (x *GetTechAnalysisRequest_Smoothing) GetSignalSmoothing() int32 {
	if x != nil {
		return x.SignalSmoothing
	}
	return 0
}

type GetTechAnalysisRequest_Deviation struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DeviationMultiplier *Quotation             `protobuf:"bytes,1,opt,name=deviation_multiplier,json=deviationMultiplier,proto3" json:"deviation_multiplier,omitempty"` //Количество стандартных отклонений, на которые отступают верхняя и нижняя границы.
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetTechAnalysisRequest_Deviation) Reset() {
	*x = GetTechAnalysisRequest_Deviation{}
	mi := &file_marketdata_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechAnalysisRequest_Deviation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisRequest_Deviation) ProtoMessage() {}

func (x *GetTechAnalysisRequest_Deviation) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisRequest_Deviation.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisRequest_Deviation) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{47, 1}
}

func (x *GetTechAnalysisRequest_Deviation) GetDeviationMultiplier() *Quotation {
	if x != nil {
		return x.DeviationMultiplier
	}
	return nil
}

type GetTechAnalysisResponse_TechAnalysisItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                           //Временная метка по UTC, для которой были рассчитаны значения индикатора.
	MiddleBand    *Quotation             `protobuf:"bytes,2,opt,name=middle_band,json=middleBand,proto3,oneof" json:"middle_band,omitempty"` //Значение простого скользящего среднего (средней линии).
	UpperBand     *Quotation             `protobuf:"bytes,3,opt,name=upper_band,json=upperBand,proto3,oneof" json:"upper_band,omitempty"`    //Значение верхней линии Боллинджера.
	LowerBand     *Quotation             `protobuf:"bytes,4,opt,name=lower_band,json=lowerBand,proto3,oneof" json:"lower_band,omitempty"`    //Значение нижней линии Боллинджера.
	Signal        *Quotation             `protobuf:"bytes,5,opt,name=signal,proto3,oneof" json:"signal,omitempty"`                           //Значение сигнальной линии.
	Macd          *Quotation             `protobuf:"bytes,6,opt,name=macd,proto3,oneof" json:"macd,omitempty"`                               //Значение линии MACD.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) Reset() {
	*x = GetTechAnalysisResponse_TechAnalysisItem{}
	mi := &file_marketdata_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechAnalysisResponse_TechAnalysisItem) ProtoMessage() {}

func (x *GetTechAnalysisResponse_TechAnalysisItem) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechAnalysisResponse_TechAnalysisItem.ProtoReflect.Descriptor instead.
func (*GetTechAnalysisResponse_TechAnalysisItem) Descriptor() ([]byte, []int) {
	return file_marketdata_proto_rawDescGZIP(), []int{48, 0}
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetMiddleBand() *Quotation {
	if x != nil {
		return x.MiddleBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetUpperBand() *Quotation {
	if x != nil {
		return x.UpperBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetLowerBand() *Quotation {
	if x != nil {
		return x.LowerBand
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetSignal() *Quotation {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GetTechAnalysisResponse_TechAnalysisItem) GetMacd() *Quotation {
	if x != nil {
		return x.Macd
	}
	return nil
}

var File_marketdata_proto protoreflect.FileDescriptor

const file_marketdata_proto_rawDesc = "" +
	"\n" +
	"\x10marketdata.proto\x12%tinkoff.public.invest.api.contract.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\fcommon.proto\x1a\x1fgoogle/api/field_behavior.proto\"\xb2\a\n" +
	"\x11MarketDataRequest\x12|\n" +
	"\x19subscribe_candles_request\x18\x01 \x01(\v2>.tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequestH\x00R\x17subscribeCandlesRequest\x12\x83\x01\n" +
	"\x1csubscribe_order_book_request\x18\x02 \x01(\v2@.tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequestH\x00R\x19subscribeOrderBookRequest\x12y\n" +
	"\x18subscribe_trades_request\x18\x03 \x01(\v2=.tinkoff.public.invest.api.contract.v1.SubscribeTradesRequestH\x00R\x16subscribeTradesRequest\x12s\n" +
	"\x16subscribe_info_request\x18\x04 \x01(\v2;.tinkoff.public.invest.api.contract.v1.SubscribeInfoRequestH\x00R\x14subscribeInfoRequest\x12\x83\x01\n" +
	"\x1csubscribe_last_price_request\x18\x05 \x01(\v2@.tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequestH\x00R\x19subscribeLastPriceRequest\x12m\n" +
	"\x14get_my_subscriptions\x18\x06 \x01(\v29.tinkoff.public.invest.api.contract.v1.GetMySubscriptionsH\x00R\x12getMySubscriptions\x12H\n" +
	"\x04ping\x18\a \x01(\v22.tinkoff.public.invest.api.contract.v1.PingRequestH\x00R\x04ping\x12_\n" +
	"\rping_settings\x18\x0f \x01(\v28.tinkoff.public.invest.api.contract.v1.PingDelaySettingsH\x00R\fpingSettingsB\t\n" +
	"\apayload\"\xf2\x05\n" +
	"!MarketDataServerSideStreamRequest\x12z\n" +
	"\x19subscribe_candles_request\x18\x01 \x01(\v2>.tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequestR\x17subscribeCandlesRequest\x12\x81\x01\n" +
	"\x1csubscribe_order_book_request\x18\x02 \x01(\v2@.tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequestR\x19subscribeOrderBookRequest\x12w\n" +
	"\x18subscribe_trades_request\x18\x03 \x01(\v2=.tinkoff.public.invest.api.contract.v1.SubscribeTradesRequestR\x16subscribeTradesRequest\x12q\n" +
	"\x16subscribe_info_request\x18\x04 \x01(\v2;.tinkoff.public.invest.api.contract.v1.SubscribeInfoRequestR\x14subscribeInfoRequest\x12\x81\x01\n" +
	"\x1csubscribe_last_price_request\x18\x05 \x01(\v2@.tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequestR\x19subscribeLastPriceRequest\x12]\n" +
	"\rping_settings\x18\x0f \x01(\v28.tinkoff.public.invest.api.contract.v1.PingDelaySettingsR\fpingSettings\"\xfe\b\n" +
	"\x12MarketDataResponse\x12\x7f\n" +
	"\x1asubscribe_candles_response\x18\x01 \x01(\v2?.tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponseH\x00R\x18subscribeCandlesResponse\x12\x86\x01\n" +
	"\x1dsubscribe_order_book_response\x18\x02 \x01(\v2A.tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponseH\x00R\x1asubscribeOrderBookResponse\x12|\n" +
	"\x19subscribe_trades_response\x18\x03 \x01(\v2>.tinkoff.public.invest.api.contract.v1.SubscribeTradesResponseH\x00R\x17subscribeTradesResponse\x12v\n" +
	"\x17subscribe_info_response\x18\x04 \x01(\v2<.tinkoff.public.invest.api.contract.v1.SubscribeInfoResponseH\x00R\x15subscribeInfoResponse\x12G\n" +
	"\x06candle\x18\x05 \x01(\v2-.tinkoff.public.invest.api.contract.v1.CandleH\x00R\x06candle\x12D\n" +
	"\x05trade\x18\x06 \x01(\v2,.tinkoff.public.invest.api.contract.v1.TradeH\x00R\x05trade\x12P\n" +
	"\torderbook\x18\a \x01(\v20.tinkoff.public.invest.api.contract.v1.OrderBookH\x00R\torderbook\x12]\n" +
	"\x0etrading_status\x18\b \x01(\v24.tinkoff.public.invest.api.contract.v1.TradingStatusH\x00R\rtradingStatus\x12A\n" +
	"\x04ping\x18\t \x01(\v2+.tinkoff.public.invest.api.contract.v1.PingH\x00R\x04ping\x12\x86\x01\n" +
	"\x1dsubscribe_last_price_response\x18\n" +
	" \x01(\v2A.tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponseH\x00R\x1asubscribeLastPriceResponse\x12Q\n" +
	"\n" +
	"last_price\x18\v \x01(\v20.tinkoff.public.invest.api.contract.v1.LastPriceH\x00R\tlastPriceB\t\n" +
	"\apayload\"\x96\x03\n" +
	"\x17SubscribeCandlesRequest\x12j\n" +
	"\x13subscription_action\x18\x01 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionActionR\x12subscriptionAction\x12Y\n" +
	"\vinstruments\x18\x02 \x03(\v27.tinkoff.public.invest.api.contract.v1.CandleInstrumentR\vinstruments\x12#\n" +
	"\rwaiting_close\x18\x03 \x01(\bR\fwaitingClose\x12x\n" +
	"\x12candle_source_type\x18\t \x01(\x0e2E.tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSourceH\x00R\x10candleSourceType\x88\x01\x01B\x15\n" +
	"\x13_candle_source_type\"\xa8\x01\n" +
	"\x10CandleInstrument\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12W\n" +
	"\binterval\x18\x02 \x01(\x0e2;.tinkoff.public.invest.api.contract.v1.SubscriptionIntervalR\binterval\x12#\n" +
	"\rinstrument_id\x18\x03 \x01(\tR\finstrumentId\"\xab\x01\n" +
	"\x18SubscribeCandlesResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x12n\n" +
	"\x15candles_subscriptions\x18\x02 \x03(\v29.tinkoff.public.invest.api.contract.v1.CandleSubscriptionR\x14candlesSubscriptions\"\x90\x04\n" +
	"\x12CandleSubscription\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12W\n" +
	"\binterval\x18\x02 \x01(\x0e2;.tinkoff.public.invest.api.contract.v1.SubscriptionIntervalR\binterval\x12j\n" +
	"\x13subscription_status\x18\x03 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionStatusR\x12subscriptionStatus\x12%\n" +
	"\x0einstrument_uid\x18\x04 \x01(\tR\rinstrumentUid\x12#\n" +
	"\rwaiting_close\x18\x05 \x01(\bR\fwaitingClose\x12\x1b\n" +
	"\tstream_id\x18\x06 \x01(\tR\bstreamId\x12'\n" +
	"\x0fsubscription_id\x18\a \x01(\tR\x0esubscriptionId\x12x\n" +
	"\x12candle_source_type\x18\t \x01(\x0e2E.tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSourceH\x00R\x10candleSourceType\x88\x01\x01B\x15\n" +
	"\x13_candle_source_type\"\xe5\x01\n" +
	"\x19SubscribeOrderBookRequest\x12j\n" +
	"\x13subscription_action\x18\x01 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionActionR\x12subscriptionAction\x12\\\n" +
	"\vinstruments\x18\x02 \x03(\v2:.tinkoff.public.invest.api.contract.v1.OrderBookInstrumentR\vinstruments\"\xc6\x01\n" +
	"\x13OrderBookInstrument\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12\x14\n" +
	"\x05depth\x18\x02 \x01(\x05R\x05depth\x12#\n" +
	"\rinstrument_id\x18\x03 \x01(\tR\finstrumentId\x12\\\n" +
	"\x0forder_book_type\x18\x04 \x01(\x0e24.tinkoff.public.invest.api.contract.v1.OrderBookTypeR\rorderBookType\"\xb5\x01\n" +
	"\x1aSubscribeOrderBookResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x12v\n" +
	"\x18order_book_subscriptions\x18\x02 \x03(\v2<.tinkoff.public.invest.api.contract.v1.OrderBookSubscriptionR\x16orderBookSubscriptions\"\xf8\x02\n" +
	"\x15OrderBookSubscription\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x14\n" +
	"\x05depth\x18\x02 \x01(\x05R\x05depth\x12j\n" +
	"\x13subscription_status\x18\x03 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionStatusR\x12subscriptionStatus\x12%\n" +
	"\x0einstrument_uid\x18\x04 \x01(\tR\rinstrumentUid\x12\x1b\n" +
	"\tstream_id\x18\x05 \x01(\tR\bstreamId\x12'\n" +
	"\x0fsubscription_id\x18\x06 \x01(\tR\x0esubscriptionId\x12\\\n" +
	"\x0forder_book_type\x18\a \x01(\x0e24.tinkoff.public.invest.api.contract.v1.OrderBookTypeR\rorderBookType\"\xb9\x02\n" +
	"\x16SubscribeTradesRequest\x12j\n" +
	"\x13subscription_action\x18\x01 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionActionR\x12subscriptionAction\x12X\n" +
	"\vinstruments\x18\x02 \x03(\v26.tinkoff.public.invest.api.contract.v1.TradeInstrumentR\vinstruments\x12Y\n" +
	"\ftrade_source\x18\x03 \x01(\x0e26.tinkoff.public.invest.api.contract.v1.TradeSourceTypeR\vtradeSource\"N\n" +
	"\x0fTradeInstrument\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12#\n" +
	"\rinstrument_id\x18\x02 \x01(\tR\finstrumentId\"\x80\x02\n" +
	"\x17SubscribeTradesResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x12i\n" +
	"\x13trade_subscriptions\x18\x02 \x03(\v28.tinkoff.public.invest.api.contract.v1.TradeSubscriptionR\x12tradeSubscriptions\x12Y\n" +
	"\ftrade_source\x18\x03 \x01(\x0e26.tinkoff.public.invest.api.contract.v1.TradeSourceTypeR\vtradeSource\"\x80\x02\n" +
	"\x11TradeSubscription\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12j\n" +
	"\x13subscription_status\x18\x02 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionStatusR\x12subscriptionStatus\x12%\n" +
	"\x0einstrument_uid\x18\x03 \x01(\tR\rinstrumentUid\x12\x1b\n" +
	"\tstream_id\x18\x04 \x01(\tR\bstreamId\x12'\n" +
	"\x0fsubscription_id\x18\x05 \x01(\tR\x0esubscriptionId\"\xdb\x01\n" +
	"\x14SubscribeInfoRequest\x12j\n" +
	"\x13subscription_action\x18\x01 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionActionR\x12subscriptionAction\x12W\n" +
	"\vinstruments\x18\x02 \x03(\v25.tinkoff.public.invest.api.contract.v1.InfoInstrumentR\vinstruments\"M\n" +
	"\x0eInfoInstrument\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12#\n" +
	"\rinstrument_id\x18\x02 \x01(\tR\finstrumentId\"\xa0\x01\n" +
	"\x15SubscribeInfoResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x12f\n" +
	"\x12info_subscriptions\x18\x02 \x03(\v27.tinkoff.public.invest.api.contract.v1.InfoSubscriptionR\x11infoSubscriptions\"\xff\x01\n" +
	"\x10InfoSubscription\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12j\n" +
	"\x13subscription_status\x18\x02 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionStatusR\x12subscriptionStatus\x12%\n" +
	"\x0einstrument_uid\x18\x03 \x01(\tR\rinstrumentUid\x12\x1b\n" +
	"\tstream_id\x18\x04 \x01(\tR\bstreamId\x12'\n" +
	"\x0fsubscription_id\x18\x05 \x01(\tR\x0esubscriptionId\"\xe5\x01\n" +
	"\x19SubscribeLastPriceRequest\x12j\n" +
	"\x13subscription_action\x18\x01 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionActionR\x12subscriptionAction\x12\\\n" +
	"\vinstruments\x18\x02 \x03(\v2:.tinkoff.public.invest.api.contract.v1.LastPriceInstrumentR\vinstruments\"R\n" +
	"\x13LastPriceInstrument\x12\x16\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01R\x04figi\x12#\n" +
	"\rinstrument_id\x18\x02 \x01(\tR\finstrumentId\"\xb5\x01\n" +
	"\x1aSubscribeLastPriceResponse\x12\x1f\n" +
	"\vtracking_id\x18\x01 \x01(\tR\n" +
	"trackingId\x12v\n" +
	"\x18last_price_subscriptions\x18\x02 \x03(\v2<.tinkoff.public.invest.api.contract.v1.LastPriceSubscriptionR\x16lastPriceSubscriptions\"\x84\x02\n" +
	"\x15LastPriceSubscription\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12j\n" +
	"\x13subscription_status\x18\x02 \x01(\x0e29.tinkoff.public.invest.api.contract.v1.SubscriptionStatusR\x12subscriptionStatus\x12%\n" +
	"\x0einstrument_uid\x18\x03 \x01(\tR\rinstrumentUid\x12\x1b\n" +
	"\tstream_id\x18\x04 \x01(\tR\bstreamId\x12'\n" +
	"\x0fsubscription_id\x18\x05 \x01(\tR\x0esubscriptionId\"\x9f\x05\n" +
	"\x06Candle\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12W\n" +
	"\binterval\x18\x02 \x01(\x0e2;.tinkoff.public.invest.api.contract.v1.SubscriptionIntervalR\binterval\x12D\n" +
	"\x04open\x18\x03 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x04open\x12D\n" +
	"\x04high\x18\x04 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x04high\x12B\n" +
	"\x03low\x18\x05 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x03low\x12F\n" +
	"\x05close\x18\x06 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05close\x12\x16\n" +
	"\x06volume\x18\a \x01(\x03R\x06volume\x12.\n" +
	"\x04time\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12>\n" +
	"\rlast_trade_ts\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\vlastTradeTs\x12%\n" +
	"\x0einstrument_uid\x18\n" +
	" \x01(\tR\rinstrumentUid\x12a\n" +
	"\x12candle_source_type\x18\x13 \x01(\x0e23.tinkoff.public.invest.api.contract.v1.CandleSourceR\x10candleSourceType\"\xb1\x04\n" +
	"\tOrderBook\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x14\n" +
	"\x05depth\x18\x02 \x01(\x05R\x05depth\x12#\n" +
	"\ris_consistent\x18\x03 \x01(\bR\fisConsistent\x12@\n" +
	"\x04bids\x18\x04 \x03(\v2,.tinkoff.public.invest.api.contract.v1.OrderR\x04bids\x12@\n" +
	"\x04asks\x18\x05 \x03(\v2,.tinkoff.public.invest.api.contract.v1.OrderR\x04asks\x12.\n" +
	"\x04time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12K\n" +
	"\blimit_up\x18\a \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\alimitUp\x12O\n" +
	"\n" +
	"limit_down\x18\b \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\tlimitDown\x12%\n" +
	"\x0einstrument_uid\x18\t \x01(\tR\rinstrumentUid\x12\\\n" +
	"\x0forder_book_type\x18\n" +
	" \x01(\x0e24.tinkoff.public.invest.api.contract.v1.OrderBookTypeR\rorderBookType\"k\n" +
	"\x05Order\x12F\n" +
	"\x05price\x18\x01 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05price\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x03R\bquantity\"\x86\x03\n" +
	"\x05Trade\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12S\n" +
	"\tdirection\x18\x02 \x01(\x0e25.tinkoff.public.invest.api.contract.v1.TradeDirectionR\tdirection\x12F\n" +
	"\x05price\x18\x03 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05price\x12\x1a\n" +
	"\bquantity\x18\x04 \x01(\x03R\bquantity\x12.\n" +
	"\x04time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12%\n" +
	"\x0einstrument_uid\x18\x06 \x01(\tR\rinstrumentUid\x12Y\n" +
	"\ftrade_source\x18\a \x01(\x0e26.tinkoff.public.invest.api.contract.v1.TradeSourceTypeR\vtradeSource\"\xdb\x02\n" +
	"\rTradingStatus\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12c\n" +
	"\x0etrading_status\x18\x02 \x01(\x0e2<.tinkoff.public.invest.api.contract.v1.SecurityTradingStatusR\rtradingStatus\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12;\n" +
	"\x1alimit_order_available_flag\x18\x04 \x01(\bR\x17limitOrderAvailableFlag\x12=\n" +
	"\x1bmarket_order_available_flag\x18\x05 \x01(\bR\x18marketOrderAvailableFlag\x12%\n" +
	"\x0einstrument_uid\x18\x06 \x01(\tR\rinstrumentUid\"\xda\x04\n" +
	"\x11GetCandlesRequest\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x124\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x04from\x120\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x02to\x12W\n" +
	"\binterval\x18\x04 \x01(\x0e25.tinkoff.public.invest.api.contract.v1.CandleIntervalB\x04\xe2A\x01\x02R\binterval\x12(\n" +
	"\rinstrument_id\x18\x05 \x01(\tH\x01R\finstrumentId\x88\x01\x01\x12x\n" +
	"\x12candle_source_type\x18\a \x01(\x0e2E.tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSourceH\x02R\x10candleSourceType\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\n" +
	" \x01(\x05H\x03R\x05limit\x88\x01\x01\"l\n" +
	"\fCandleSource\x12\x1d\n" +
	"\x19CANDLE_SOURCE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CANDLE_SOURCE_EXCHANGE\x10\x01\x12!\n" +
	"\x1dCANDLE_SOURCE_INCLUDE_WEEKEND\x10\x03B\a\n" +
	"\x05_figiB\x10\n" +
	"\x0e_instrument_idB\x15\n" +
	"\x13_candle_source_typeB\b\n" +
	"\x06_limit\"e\n" +
	"\x12GetCandlesResponse\x12O\n" +
	"\acandles\x18\x01 \x03(\v25.tinkoff.public.invest.api.contract.v1.HistoricCandleR\acandles\"\xeb\x03\n" +
	"\x0eHistoricCandle\x12D\n" +
	"\x04open\x18\x01 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x04open\x12D\n" +
	"\x04high\x18\x02 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x04high\x12B\n" +
	"\x03low\x18\x03 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x03low\x12F\n" +
	"\x05close\x18\x04 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05close\x12\x16\n" +
	"\x06volume\x18\x05 \x01(\x03R\x06volume\x12.\n" +
	"\x04time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12\x1f\n" +
	"\vis_complete\x18\a \x01(\bR\n" +
	"isComplete\x12X\n" +
	"\rcandle_source\x18\t \x01(\x0e23.tinkoff.public.invest.api.contract.v1.CandleSourceR\fcandleSource\"\xb2\x02\n" +
	"\x14GetLastPricesRequest\x12\x16\n" +
	"\x04figi\x18\x01 \x03(\tB\x02\x18\x01R\x04figi\x12#\n" +
	"\rinstrument_id\x18\x02 \x03(\tR\finstrumentId\x12\\\n" +
	"\x0flast_price_type\x18\x03 \x01(\x0e24.tinkoff.public.invest.api.contract.v1.LastPriceTypeR\rlastPriceType\x12i\n" +
	"\x11instrument_status\x18\t \x01(\x0e27.tinkoff.public.invest.api.contract.v1.InstrumentStatusH\x00R\x10instrumentStatus\x88\x01\x01B\x14\n" +
	"\x12_instrument_status\"j\n" +
	"\x15GetLastPricesResponse\x12Q\n" +
	"\vlast_prices\x18\x01 \x03(\v20.tinkoff.public.invest.api.contract.v1.LastPriceR\n" +
	"lastPrices\"\x9c\x02\n" +
	"\tLastPrice\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12F\n" +
	"\x05price\x18\x02 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05price\x12.\n" +
	"\x04time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\x12%\n" +
	"\x0einstrument_uid\x18\v \x01(\tR\rinstrumentUid\x12\\\n" +
	"\x0flast_price_type\x18\f \x01(\x0e24.tinkoff.public.invest.api.contract.v1.LastPriceTypeR\rlastPriceType\"\x93\x01\n" +
	"\x13GetOrderBookRequest\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x12\x1a\n" +
	"\x05depth\x18\x02 \x01(\x05B\x04\xe2A\x01\x02R\x05depth\x12(\n" +
	"\rinstrument_id\x18\x03 \x01(\tH\x01R\finstrumentId\x88\x01\x01B\a\n" +
	"\x05_figiB\x10\n" +
	"\x0e_instrument_id\"\xee\x05\n" +
	"\x14GetOrderBookResponse\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12\x14\n" +
	"\x05depth\x18\x02 \x01(\x05R\x05depth\x12@\n" +
	"\x04bids\x18\x03 \x03(\v2,.tinkoff.public.invest.api.contract.v1.OrderR\x04bids\x12@\n" +
	"\x04asks\x18\x04 \x03(\v2,.tinkoff.public.invest.api.contract.v1.OrderR\x04asks\x12O\n" +
	"\n" +
	"last_price\x18\x05 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\tlastPrice\x12Q\n" +
	"\vclose_price\x18\x06 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\n" +
	"closePrice\x12K\n" +
	"\blimit_up\x18\a \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\alimitUp\x12O\n" +
	"\n" +
	"limit_down\x18\b \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\tlimitDown\x12>\n" +
	"\rlast_price_ts\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\vlastPriceTs\x12@\n" +
	"\x0eclose_price_ts\x18\x16 \x01(\v2\x1a.google.protobuf.TimestampR\fclosePriceTs\x12=\n" +
	"\forderbook_ts\x18\x17 \x01(\v2\x1a.google.protobuf.TimestampR\vorderbookTs\x12%\n" +
	"\x0einstrument_uid\x18\t \x01(\tR\rinstrumentUid\"{\n" +
	"\x17GetTradingStatusRequest\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x12(\n" +
	"\rinstrument_id\x18\x02 \x01(\tH\x01R\finstrumentId\x88\x01\x01B\a\n" +
	"\x05_figiB\x10\n" +
	"\x0e_instrument_id\"@\n" +
	"\x19GetTradingStatusesRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x03(\tR\finstrumentId\"\x88\x01\n" +
	"\x1aGetTradingStatusesResponse\x12j\n" +
	"\x10trading_statuses\x18\x01 \x03(\v2?.tinkoff.public.invest.api.contract.v1.GetTradingStatusResponseR\x0ftradingStatuses\"\xdc\x03\n" +
	"\x18GetTradingStatusResponse\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12c\n" +
	"\x0etrading_status\x18\x02 \x01(\x0e2<.tinkoff.public.invest.api.contract.v1.SecurityTradingStatusR\rtradingStatus\x12;\n" +
	"\x1alimit_order_available_flag\x18\x03 \x01(\bR\x17limitOrderAvailableFlag\x12=\n" +
	"\x1bmarket_order_available_flag\x18\x04 \x01(\bR\x18marketOrderAvailableFlag\x127\n" +
	"\x18api_trade_available_flag\x18\x05 \x01(\bR\x15apiTradeAvailableFlag\x12%\n" +
	"\x0einstrument_uid\x18\x06 \x01(\tR\rinstrumentUid\x12C\n" +
	"\x1ebestprice_order_available_flag\x18\b \x01(\bR\x1bbestpriceOrderAvailableFlag\x12&\n" +
	"\x0fonly_best_price\x18\t \x01(\bR\ronlyBestPrice\"\xbb\x02\n" +
	"\x14GetLastTradesRequest\x12\x1b\n" +
	"\x04figi\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x04figi\x88\x01\x01\x124\n" +
	"\x04from\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x04from\x120\n" +
	"\x02to\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x02to\x12(\n" +
	"\rinstrument_id\x18\x04 \x01(\tH\x01R\finstrumentId\x88\x01\x01\x12Y\n" +
	"\ftrade_source\x18\x05 \x01(\x0e26.tinkoff.public.invest.api.contract.v1.TradeSourceTypeR\vtradeSourceB\a\n" +
	"\x05_figiB\x10\n" +
	"\x0e_instrument_id\"]\n" +
	"\x15GetLastTradesResponse\x12D\n" +
	"\x06trades\x18\x01 \x03(\v2,.tinkoff.public.invest.api.contract.v1.TradeR\x06trades\"\x14\n" +
	"\x12GetMySubscriptions\"\x84\x02\n" +
	"\x15GetClosePricesRequest\x12j\n" +
	"\vinstruments\x18\x01 \x03(\v2B.tinkoff.public.invest.api.contract.v1.InstrumentClosePriceRequestB\x04\xe2A\x01\x02R\vinstruments\x12i\n" +
	"\x11instrument_status\x18\t \x01(\x0e27.tinkoff.public.invest.api.contract.v1.InstrumentStatusH\x00R\x10instrumentStatus\x88\x01\x01B\x14\n" +
	"\x12_instrument_status\"B\n" +
	"\x1bInstrumentClosePriceRequest\x12#\n" +
	"\rinstrument_id\x18\x01 \x01(\tR\finstrumentId\"\x80\x01\n" +
	"\x16GetClosePricesResponse\x12f\n" +
	"\fclose_prices\x18\x01 \x03(\v2C.tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponseR\vclosePrices\"\xb7\x02\n" +
	"\x1cInstrumentClosePriceResponse\x12\x12\n" +
	"\x04figi\x18\x01 \x01(\tR\x04figi\x12%\n" +
	"\x0einstrument_uid\x18\x02 \x01(\tR\rinstrumentUid\x12F\n" +
	"\x05price\x18\v \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x05price\x12d\n" +
	"\x15evening_session_price\x18\f \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x13eveningSessionPrice\x12.\n" +
	"\x04time\x18\x15 \x01(\v2\x1a.google.protobuf.TimestampR\x04time\"\x8f\x0e\n" +
	"\x16GetTechAnalysisRequest\x12x\n" +
	"\x0eindicator_type\x18\x01 \x01(\x0e2K.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorTypeB\x04\xe2A\x01\x02R\rindicatorType\x12+\n" +
	"\x0einstrument_uid\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\rinstrumentUid\x124\n" +
	"\x04from\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x04from\x120\n" +
	"\x02to\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x02R\x02to\x12q\n" +
	"\binterval\x18\x05 \x01(\x0e2O.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorIntervalB\x04\xe2A\x01\x02R\binterval\x12s\n" +
	"\rtype_of_price\x18\x06 \x01(\x0e2I.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPriceB\x04\xe2A\x01\x02R\vtypeOfPrice\x12\x16\n" +
	"\x06length\x18\a \x01(\x05R\x06length\x12e\n" +
	"\tdeviation\x18\b \x01(\v2G.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.DeviationR\tdeviation\x12e\n" +
	"\tsmoothing\x18\t \x01(\v2G.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.SmoothingR\tsmoothing\x1ax\n" +
	"\tSmoothing\x12\x1f\n" +
	"\vfast_length\x18\x01 \x01(\x05R\n" +
	"fastLength\x12\x1f\n" +
	"\vslow_length\x18\x02 \x01(\x05R\n" +
	"slowLength\x12)\n" +
	"\x10signal_smoothing\x18\x03 \x01(\x05R\x0fsignalSmoothing\x1ap\n" +
	"\tDeviation\x12c\n" +
	"\x14deviation_multiplier\x18\x01 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationR\x13deviationMultiplier\"\xdb\x03\n" +
	"\x11IndicatorInterval\x12\"\n" +
	"\x1eINDICATOR_INTERVAL_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dINDICATOR_INTERVAL_ONE_MINUTE\x10\x01\x12#\n" +
	"\x1fINDICATOR_INTERVAL_FIVE_MINUTES\x10\x02\x12&\n" +
	"\"INDICATOR_INTERVAL_FIFTEEN_MINUTES\x10\x03\x12\x1f\n" +
	"\x1bINDICATOR_INTERVAL_ONE_HOUR\x10\x04\x12\x1e\n" +
	"\x1aINDICATOR_INTERVAL_ONE_DAY\x10\x05\x12\x1c\n" +
	"\x18INDICATOR_INTERVAL_2_MIN\x10\x06\x12\x1c\n" +
	"\x18INDICATOR_INTERVAL_3_MIN\x10\a\x12\x1d\n" +
	"\x19INDICATOR_INTERVAL_10_MIN\x10\b\x12\x1d\n" +
	"\x19INDICATOR_INTERVAL_30_MIN\x10\t\x12\x1d\n" +
	"\x19INDICATOR_INTERVAL_2_HOUR\x10\n" +
	"\x12\x1d\n" +
	"\x19INDICATOR_INTERVAL_4_HOUR\x10\v\x12\x1b\n" +
	"\x17INDICATOR_INTERVAL_WEEK\x10\f\x12\x1c\n" +
	"\x18INDICATOR_INTERVAL_MONTH\x10\r\"\xa3\x01\n" +
	"\vTypeOfPrice\x12\x1d\n" +
	"\x19TYPE_OF_PRICE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13TYPE_OF_PRICE_CLOSE\x10\x01\x12\x16\n" +
	"\x12TYPE_OF_PRICE_OPEN\x10\x02\x12\x16\n" +
	"\x12TYPE_OF_PRICE_HIGH\x10\x03\x12\x15\n" +
	"\x11TYPE_OF_PRICE_LOW\x10\x04\x12\x15\n" +
	"\x11TYPE_OF_PRICE_AVG\x10\x05\"\xa7\x01\n" +
	"\rIndicatorType\x12\x1e\n" +
	"\x1aINDICATOR_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11INDICATOR_TYPE_BB\x10\x01\x12\x16\n" +
	"\x12INDICATOR_TYPE_EMA\x10\x02\x12\x16\n" +
	"\x12INDICATOR_TYPE_RSI\x10\x03\x12\x17\n" +
	"\x13INDICATOR_TYPE_MACD\x10\x04\x12\x16\n" +
	"\x12INDICATOR_TYPE_SMA\x10\x05\"\xcd\x05\n" +
	"\x17GetTechAnalysisResponse\x12\x82\x01\n" +
	"\x14technical_indicators\x18\x01 \x03(\v2O.tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItemR\x13technicalIndicators\x1a\xac\x04\n" +
	"\x10TechAnalysisItem\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12V\n" +
	"\vmiddle_band\x18\x02 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationH\x00R\n" +
	"middleBand\x88\x01\x01\x12T\n" +
	"\n" +
	"upper_band\x18\x03 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationH\x01R\tupperBand\x88\x01\x01\x12T\n" +
	"\n" +
	"lower_band\x18\x04 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationH\x02R\tlowerBand\x88\x01\x01\x12M\n" +
	"\x06signal\x18\x05 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationH\x03R\x06signal\x88\x01\x01\x12I\n" +
	"\x04macd\x18\x06 \x01(\v20.tinkoff.public.invest.api.contract.v1.QuotationH\x04R\x04macd\x88\x01\x01B\x0e\n" +
	"\f_middle_bandB\r\n" +
	"\v_upper_bandB\r\n" +
	"\v_lower_bandB\t\n" +
	"\a_signalB\a\n" +
	"\x05_macd*\x81\x01\n" +
	"\x12SubscriptionAction\x12#\n" +
	"\x1fSUBSCRIPTION_ACTION_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dSUBSCRIPTION_ACTION_SUBSCRIBE\x10\x01\x12#\n" +
	"\x1fSUBSCRIPTION_ACTION_UNSUBSCRIBE\x10\x02*\x88\x04\n" +
	"\x14SubscriptionInterval\x12%\n" +
	"!SUBSCRIPTION_INTERVAL_UNSPECIFIED\x10\x00\x12$\n" +
	" SUBSCRIPTION_INTERVAL_ONE_MINUTE\x10\x01\x12&\n" +
	"\"SUBSCRIPTION_INTERVAL_FIVE_MINUTES\x10\x02\x12)\n" +
	"%SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES\x10\x03\x12\"\n" +
	"\x1eSUBSCRIPTION_INTERVAL_ONE_HOUR\x10\x04\x12!\n" +
	"\x1dSUBSCRIPTION_INTERVAL_ONE_DAY\x10\x05\x12\x1f\n" +
	"\x1bSUBSCRIPTION_INTERVAL_2_MIN\x10\x06\x12\x1f\n" +
	"\x1bSUBSCRIPTION_INTERVAL_3_MIN\x10\a\x12 \n" +
	"\x1cSUBSCRIPTION_INTERVAL_10_MIN\x10\b\x12 \n" +
	"\x1cSUBSCRIPTION_INTERVAL_30_MIN\x10\t\x12 \n" +
	"\x1cSUBSCRIPTION_INTERVAL_2_HOUR\x10\n" +
	"\x12 \n" +
	"\x1cSUBSCRIPTION_INTERVAL_4_HOUR\x10\v\x12\x1e\n" +
	"\x1aSUBSCRIPTION_INTERVAL_WEEK\x10\f\x12\x1f\n" +
	"\x1bSUBSCRIPTION_INTERVAL_MONTH\x10\r*\xf0\x03\n" +
	"\x12SubscriptionStatus\x12#\n" +
	"\x1fSUBSCRIPTION_STATUS_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bSUBSCRIPTION_STATUS_SUCCESS\x10\x01\x12,\n" +
	"(SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND\x10\x02\x126\n" +
	"2SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID\x10\x03\x12(\n" +
	"$SUBSCRIPTION_STATUS_DEPTH_IS_INVALID\x10\x04\x12+\n" +
	"'SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID\x10\x05\x12)\n" +
	"%SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED\x10\x06\x12&\n" +
	"\"SUBSCRIPTION_STATUS_INTERNAL_ERROR\x10\a\x12)\n" +
	"%SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS\x10\b\x12.\n" +
	"*SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND\x10\t\x12)\n" +
	"%SUBSCRIPTION_STATUS_SOURCE_IS_INVALID\x10\n" +
	"*y\n" +
	"\x0fTradeSourceType\x12\x1c\n" +
	"\x18TRADE_SOURCE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15TRADE_SOURCE_EXCHANGE\x10\x01\x12\x17\n" +
	"\x13TRADE_SOURCE_DEALER\x10\x02\x12\x14\n" +
	"\x10TRADE_SOURCE_ALL\x10\x03*d\n" +
	"\x0eTradeDirection\x12\x1f\n" +
	"\x1bTRADE_DIRECTION_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13TRADE_DIRECTION_BUY\x10\x01\x12\x18\n" +
	"\x14TRADE_DIRECTION_SELL\x10\x02*\xe4\x03\n" +
	"\x0eCandleInterval\x12\x1f\n" +
	"\x1bCANDLE_INTERVAL_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CANDLE_INTERVAL_1_MIN\x10\x01\x12\x19\n" +
	"\x15CANDLE_INTERVAL_5_MIN\x10\x02\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_15_MIN\x10\x03\x12\x18\n" +
	"\x14CANDLE_INTERVAL_HOUR\x10\x04\x12\x17\n" +
	"\x13CANDLE_INTERVAL_DAY\x10\x05\x12\x19\n" +
	"\x15CANDLE_INTERVAL_2_MIN\x10\x06\x12\x19\n" +
	"\x15CANDLE_INTERVAL_3_MIN\x10\a\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_10_MIN\x10\b\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_30_MIN\x10\t\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_2_HOUR\x10\n" +
	"\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_4_HOUR\x10\v\x12\x18\n" +
	"\x14CANDLE_INTERVAL_WEEK\x10\f\x12\x19\n" +
	"\x15CANDLE_INTERVAL_MONTH\x10\r\x12\x19\n" +
	"\x15CANDLE_INTERVAL_5_SEC\x10\x0e\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_10_SEC\x10\x0f\x12\x1a\n" +
	"\x16CANDLE_INTERVAL_30_SEC\x10\x10*k\n" +
	"\fCandleSource\x12\x1d\n" +
	"\x19CANDLE_SOURCE_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16CANDLE_SOURCE_EXCHANGE\x10\x01\x12 \n" +
	"\x1cCANDLE_SOURCE_DEALER_WEEKEND\x10\x02*\x7f\n" +
	"\rOrderBookType\x12\x1e\n" +
	"\x1aORDERBOOK_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17ORDERBOOK_TYPE_EXCHANGE\x10\x01\x12\x19\n" +
	"\x15ORDERBOOK_TYPE_DEALER\x10\x02\x12\x16\n" +
	"\x12ORDERBOOK_TYPE_ALL\x10\x03*[\n" +
	"\rLastPriceType\x12\x1a\n" +
	"\x16LAST_PRICE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13LAST_PRICE_EXCHANGE\x10\x01\x12\x15\n" +
	"\x11LAST_PRICE_DEALER\x10\x022\x90\t\n" +
	"\x11MarketDataService\x12\x81\x01\n" +
	"\n" +
	"GetCandles\x128.tinkoff.public.invest.api.contract.v1.GetCandlesRequest\x1a9.tinkoff.public.invest.api.contract.v1.GetCandlesResponse\x12\x8a\x01\n" +
	"\rGetLastPrices\x12;.tinkoff.public.invest.api.contract.v1.GetLastPricesRequest\x1a<.tinkoff.public.invest.api.contract.v1.GetLastPricesResponse\x12\x87\x01\n" +
	"\fGetOrderBook\x12:.tinkoff.public.invest.api.contract.v1.GetOrderBookRequest\x1a;.tinkoff.public.invest.api.contract.v1.GetOrderBookResponse\x12\x93\x01\n" +
	"\x10GetTradingStatus\x12>.tinkoff.public.invest.api.contract.v1.GetTradingStatusRequest\x1a?.tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse\x12\x99\x01\n" +
	"\x12GetTradingStatuses\x12@.tinkoff.public.invest.api.contract.v1.GetTradingStatusesRequest\x1aA.tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse\x12\x8a\x01\n" +
	"\rGetLastTrades\x12;.tinkoff.public.invest.api.contract.v1.GetLastTradesRequest\x1a<.tinkoff.public.invest.api.contract.v1.GetLastTradesResponse\x12\x8d\x01\n" +
	"\x0eGetClosePrices\x12<.tinkoff.public.invest.api.contract.v1.GetClosePricesRequest\x1a=.tinkoff.public.invest.api.contract.v1.GetClosePricesResponse\x12\x90\x01\n" +
	"\x0fGetTechAnalysis\x12=.tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest\x1a>.tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse2\xcd\x02\n" +
	"\x17MarketDataStreamService\x12\x8b\x01\n" +
	"\x10MarketDataStream\x128.tinkoff.public.invest.api.contract.v1.MarketDataRequest\x1a9.tinkoff.public.invest.api.contract.v1.MarketDataResponse(\x010\x01\x12\xa3\x01\n" +
	"\x1aMarketDataServerSideStream\x12H.tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest\x1a9.tinkoff.public.invest.api.contract.v1.MarketDataResponse0\x01Ba\n" +
	"\x1cru.tinkoff.piapi.contract.v1P\x01Z\f./;investapi\xa2\x02\x05TIAPI\xaa\x02\x14Tinkoff.InvestApi.V1\xca\x02\x11Tinkoff\\Invest\\V1b\x06proto3"

var (
	file_marketdata_proto_rawDescOnce sync.Once
	file_marketdata_proto_rawDescData []byte
)

func file_marketdata_proto_rawDescGZIP() []byte {
	file_marketdata_proto_rawDescOnce.Do(func() {
		file_marketdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_marketdata_proto_rawDesc), len(file_marketdata_proto_rawDesc)))
	})
	return file_marketdata_proto_rawDescData
}

var file_marketdata_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_marketdata_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_marketdata_proto_goTypes = []any{
	(SubscriptionAction)(0),                          // 0: tinkoff.public.invest.api.contract.v1.SubscriptionAction
	(SubscriptionInterval)(0),                        // 1: tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	(SubscriptionStatus)(0),                          // 2: tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	(TradeSourceType)(0),                             // 3: tinkoff.public.invest.api.contract.v1.TradeSourceType
	(TradeDirection)(0),                              // 4: tinkoff.public.invest.api.contract.v1.TradeDirection
	(CandleInterval)(0),                              // 5: tinkoff.public.invest.api.contract.v1.CandleInterval
	(CandleSource)(0),                                // 6: tinkoff.public.invest.api.contract.v1.CandleSource
	(OrderBookType)(0),                               // 7: tinkoff.public.invest.api.contract.v1.OrderBookType
	(LastPriceType)(0),                               // 8: tinkoff.public.invest.api.contract.v1.LastPriceType
	(GetCandlesRequest_CandleSource)(0),              // 9: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	(GetTechAnalysisRequest_IndicatorInterval)(0),    // 10: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval
	(GetTechAnalysisRequest_TypeOfPrice)(0),          // 11: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice
	(GetTechAnalysisRequest_IndicatorType)(0),        // 12: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType
	(*MarketDataRequest)(nil),                        // 13: tinkoff.public.invest.api.contract.v1.MarketDataRequest
	(*MarketDataServerSideStreamRequest)(nil),        // 14: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest
	(*MarketDataResponse)(nil),                       // 15: tinkoff.public.invest.api.contract.v1.MarketDataResponse
	(*SubscribeCandlesRequest)(nil),                  // 16: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	(*CandleInstrument)(nil),                         // 17: tinkoff.public.invest.api.contract.v1.CandleInstrument
	(*SubscribeCandlesResponse)(nil),                 // 18: tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse
	(*CandleSubscription)(nil),                       // 19: tinkoff.public.invest.api.contract.v1.CandleSubscription
	(*SubscribeOrderBookRequest)(nil),                // 20: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	(*OrderBookInstrument)(nil),                      // 21: tinkoff.public.invest.api.contract.v1.OrderBookInstrument
	(*SubscribeOrderBookResponse)(nil),               // 22: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse
	(*OrderBookSubscription)(nil),                    // 23: tinkoff.public.invest.api.contract.v1.OrderBookSubscription
	(*SubscribeTradesRequest)(nil),                   // 24: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	(*TradeInstrument)(nil),                          // 25: tinkoff.public.invest.api.contract.v1.TradeInstrument
	(*SubscribeTradesResponse)(nil),                  // 26: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse
	(*TradeSubscription)(nil),                        // 27: tinkoff.public.invest.api.contract.v1.TradeSubscription
	(*SubscribeInfoRequest)(nil),                     // 28: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	(*InfoInstrument)(nil),                           // 29: tinkoff.public.invest.api.contract.v1.InfoInstrument
	(*SubscribeInfoResponse)(nil),                    // 30: tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse
	(*InfoSubscription)(nil),                         // 31: tinkoff.public.invest.api.contract.v1.InfoSubscription
	(*SubscribeLastPriceRequest)(nil),                // 32: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	(*LastPriceInstrument)(nil),                      // 33: tinkoff.public.invest.api.contract.v1.LastPriceInstrument
	(*SubscribeLastPriceResponse)(nil),               // 34: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse
	(*LastPriceSubscription)(nil),                    // 35: tinkoff.public.invest.api.contract.v1.LastPriceSubscription
	(*Candle)(nil),                                   // 36: tinkoff.public.invest.api.contract.v1.Candle
	(*OrderBook)(nil),                                // 37: tinkoff.public.invest.api.contract.v1.OrderBook
	(*Order)(nil),                                    // 38: tinkoff.public.invest.api.contract.v1.Order
	(*Trade)(nil),                                    // 39: tinkoff.public.invest.api.contract.v1.Trade
	(*TradingStatus)(nil),                            // 40: tinkoff.public.invest.api.contract.v1.TradingStatus
	(*GetCandlesRequest)(nil),                        // 41: tinkoff.public.invest.api.contract.v1.GetCandlesRequest
	(*GetCandlesResponse)(nil),                       // 42: tinkoff.public.invest.api.contract.v1.GetCandlesResponse
	(*HistoricCandle)(nil),                           // 43: tinkoff.public.invest.api.contract.v1.HistoricCandle
	(*GetLastPricesRequest)(nil),                     // 44: tinkoff.public.invest.api.contract.v1.GetLastPricesRequest
	(*GetLastPricesResponse)(nil),                    // 45: tinkoff.public.invest.api.contract.v1.GetLastPricesResponse
	(*LastPrice)(nil),                                // 46: tinkoff.public.invest.api.contract.v1.LastPrice
	(*GetOrderBookRequest)(nil),                      // 47: tinkoff.public.invest.api.contract.v1.GetOrderBookRequest
	(*GetOrderBookResponse)(nil),                     // 48: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse
	(*GetTradingStatusRequest)(nil),                  // 49: tinkoff.public.invest.api.contract.v1.GetTradingStatusRequest
	(*GetTradingStatusesRequest)(nil),                // 50: tinkoff.public.invest.api.contract.v1.GetTradingStatusesRequest
	(*GetTradingStatusesResponse)(nil),               // 51: tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse
	(*GetTradingStatusResponse)(nil),                 // 52: tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	(*GetLastTradesRequest)(nil),                     // 53: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest
	(*GetLastTradesResponse)(nil),                    // 54: tinkoff.public.invest.api.contract.v1.GetLastTradesResponse
	(*GetMySubscriptions)(nil),                       // 55: tinkoff.public.invest.api.contract.v1.GetMySubscriptions
	(*GetClosePricesRequest)(nil),                    // 56: tinkoff.public.invest.api.contract.v1.GetClosePricesRequest
	(*InstrumentClosePriceRequest)(nil),              // 57: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceRequest
	(*GetClosePricesResponse)(nil),                   // 58: tinkoff.public.invest.api.contract.v1.GetClosePricesResponse
	(*InstrumentClosePriceResponse)(nil),             // 59: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse
	(*GetTechAnalysisRequest)(nil),                   // 60: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest
	(*GetTechAnalysisResponse)(nil),                  // 61: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse
	(*GetTechAnalysisRequest_Smoothing)(nil),         // 62: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing
	(*GetTechAnalysisRequest_Deviation)(nil),         // 63: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation
	(*GetTechAnalysisResponse_TechAnalysisItem)(nil), // 64: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem
	(*PingRequest)(nil),                              // 65: tinkoff.public.invest.api.contract.v1.PingRequest
	(*PingDelaySettings)(nil),                        // 66: tinkoff.public.invest.api.contract.v1.PingDelaySettings
	(*Ping)(nil),                                     // 67: tinkoff.public.invest.api.contract.v1.Ping
	(*Quotation)(nil),                                // 68: tinkoff.public.invest.api.contract.v1.Quotation
	(*timestamp.Timestamp)(nil),                      // 69: google.protobuf.Timestamp
	(SecurityTradingStatus)(0),                       // 70: tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	(InstrumentStatus)(0),                            // 71: tinkoff.public.invest.api.contract.v1.InstrumentStatus
}
var file_marketdata_proto_depIdxs = []int32{
	16,  // 0: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	20,  // 1: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	24,  // 2: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	28,  // 3: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_info_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	32,  // 4: tinkoff.public.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	55,  // 5: tinkoff.public.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.GetMySubscriptions
	65,  // 6: tinkoff.public.invest.api.contract.v1.MarketDataRequest.ping:type_name -> tinkoff.public.invest.api.contract.v1.PingRequest
	66,  // 7: tinkoff.public.invest.api.contract.v1.MarketDataRequest.ping_settings:type_name -> tinkoff.public.invest.api.contract.v1.PingDelaySettings
	16,  // 8: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest
	20,  // 9: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest
	24,  // 10: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest
	28,  // 11: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest
	32,  // 12: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest
	66,  // 13: tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings:type_name -> tinkoff.public.invest.api.contract.v1.PingDelaySettings
	18,  // 14: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse
	22,  // 15: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse
	26,  // 16: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse
	30,  // 17: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_info_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse
	36,  // 18: tinkoff.public.invest.api.contract.v1.MarketDataResponse.candle:type_name -> tinkoff.public.invest.api.contract.v1.Candle
	39,  // 19: tinkoff.public.invest.api.contract.v1.MarketDataResponse.trade:type_name -> tinkoff.public.invest.api.contract.v1.Trade
	37,  // 20: tinkoff.public.invest.api.contract.v1.MarketDataResponse.orderbook:type_name -> tinkoff.public.invest.api.contract.v1.OrderBook
	40,  // 21: tinkoff.public.invest.api.contract.v1.MarketDataResponse.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.TradingStatus
	67,  // 22: tinkoff.public.invest.api.contract.v1.MarketDataResponse.ping:type_name -> tinkoff.public.invest.api.contract.v1.Ping
	34,  // 23: tinkoff.public.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response:type_name -> tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse
	46,  // 24: tinkoff.public.invest.api.contract.v1.MarketDataResponse.last_price:type_name -> tinkoff.public.invest.api.contract.v1.LastPrice
	0,   // 25: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	17,  // 26: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.CandleInstrument
	9,   // 27: tinkoff.public.invest.api.contract.v1.SubscribeCandlesRequest.candle_source_type:type_name -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	1,   // 28: tinkoff.public.invest.api.contract.v1.CandleInstrument.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	19,  // 29: tinkoff.public.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.CandleSubscription
	1,   // 30: tinkoff.public.invest.api.contract.v1.CandleSubscription.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	2,   // 31: tinkoff.public.invest.api.contract.v1.CandleSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	9,   // 32: tinkoff.public.invest.api.contract.v1.CandleSubscription.candle_source_type:type_name -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	0,   // 33: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	21,  // 34: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookInstrument
	7,   // 35: tinkoff.public.invest.api.contract.v1.OrderBookInstrument.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	23,  // 36: tinkoff.public.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookSubscription
	2,   // 37: tinkoff.public.invest.api.contract.v1.OrderBookSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	7,   // 38: tinkoff.public.invest.api.contract.v1.OrderBookSubscription.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	0,   // 39: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	25,  // 40: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.TradeInstrument
	3,   // 41: tinkoff.public.invest.api.contract.v1.SubscribeTradesRequest.trade_source:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	27,  // 42: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.TradeSubscription
	3,   // 43: tinkoff.public.invest.api.contract.v1.SubscribeTradesResponse.trade_source:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	2,   // 44: tinkoff.public.invest.api.contract.v1.TradeSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	0,   // 45: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	29,  // 46: tinkoff.public.invest.api.contract.v1.SubscribeInfoRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.InfoInstrument
	31,  // 47: tinkoff.public.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.InfoSubscription
	2,   // 48: tinkoff.public.invest.api.contract.v1.InfoSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	0,   // 49: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest.subscription_action:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionAction
	33,  // 50: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceInstrument
	35,  // 51: tinkoff.public.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceSubscription
	2,   // 52: tinkoff.public.invest.api.contract.v1.LastPriceSubscription.subscription_status:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionStatus
	1,   // 53: tinkoff.public.invest.api.contract.v1.Candle.interval:type_name -> tinkoff.public.invest.api.contract.v1.SubscriptionInterval
	68,  // 54: tinkoff.public.invest.api.contract.v1.Candle.open:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 55: tinkoff.public.invest.api.contract.v1.Candle.high:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 56: tinkoff.public.invest.api.contract.v1.Candle.low:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 57: tinkoff.public.invest.api.contract.v1.Candle.close:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 58: tinkoff.public.invest.api.contract.v1.Candle.time:type_name -> google.protobuf.Timestamp
	69,  // 59: tinkoff.public.invest.api.contract.v1.Candle.last_trade_ts:type_name -> google.protobuf.Timestamp
	6,   // 60: tinkoff.public.invest.api.contract.v1.Candle.candle_source_type:type_name -> tinkoff.public.invest.api.contract.v1.CandleSource
	38,  // 61: tinkoff.public.invest.api.contract.v1.OrderBook.bids:type_name -> tinkoff.public.invest.api.contract.v1.Order
	38,  // 62: tinkoff.public.invest.api.contract.v1.OrderBook.asks:type_name -> tinkoff.public.invest.api.contract.v1.Order
	69,  // 63: tinkoff.public.invest.api.contract.v1.OrderBook.time:type_name -> google.protobuf.Timestamp
	68,  // 64: tinkoff.public.invest.api.contract.v1.OrderBook.limit_up:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 65: tinkoff.public.invest.api.contract.v1.OrderBook.limit_down:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	7,   // 66: tinkoff.public.invest.api.contract.v1.OrderBook.order_book_type:type_name -> tinkoff.public.invest.api.contract.v1.OrderBookType
	68,  // 67: tinkoff.public.invest.api.contract.v1.Order.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	4,   // 68: tinkoff.public.invest.api.contract.v1.Trade.direction:type_name -> tinkoff.public.invest.api.contract.v1.TradeDirection
	68,  // 69: tinkoff.public.invest.api.contract.v1.Trade.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 70: tinkoff.public.invest.api.contract.v1.Trade.time:type_name -> google.protobuf.Timestamp
	3,   // 71: tinkoff.public.invest.api.contract.v1.Trade.trade_source:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	70,  // 72: tinkoff.public.invest.api.contract.v1.TradingStatus.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	69,  // 73: tinkoff.public.invest.api.contract.v1.TradingStatus.time:type_name -> google.protobuf.Timestamp
	69,  // 74: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.from:type_name -> google.protobuf.Timestamp
	69,  // 75: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.to:type_name -> google.protobuf.Timestamp
	5,   // 76: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.interval:type_name -> tinkoff.public.invest.api.contract.v1.CandleInterval
	9,   // 77: tinkoff.public.invest.api.contract.v1.GetCandlesRequest.candle_source_type:type_name -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest.CandleSource
	43,  // 78: tinkoff.public.invest.api.contract.v1.GetCandlesResponse.candles:type_name -> tinkoff.public.invest.api.contract.v1.HistoricCandle
	68,  // 79: tinkoff.public.invest.api.contract.v1.HistoricCandle.open:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 80: tinkoff.public.invest.api.contract.v1.HistoricCandle.high:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 81: tinkoff.public.invest.api.contract.v1.HistoricCandle.low:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 82: tinkoff.public.invest.api.contract.v1.HistoricCandle.close:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 83: tinkoff.public.invest.api.contract.v1.HistoricCandle.time:type_name -> google.protobuf.Timestamp
	6,   // 84: tinkoff.public.invest.api.contract.v1.HistoricCandle.candle_source:type_name -> tinkoff.public.invest.api.contract.v1.CandleSource
	8,   // 85: tinkoff.public.invest.api.contract.v1.GetLastPricesRequest.last_price_type:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceType
	71,  // 86: tinkoff.public.invest.api.contract.v1.GetLastPricesRequest.instrument_status:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentStatus
	46,  // 87: tinkoff.public.invest.api.contract.v1.GetLastPricesResponse.last_prices:type_name -> tinkoff.public.invest.api.contract.v1.LastPrice
	68,  // 88: tinkoff.public.invest.api.contract.v1.LastPrice.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 89: tinkoff.public.invest.api.contract.v1.LastPrice.time:type_name -> google.protobuf.Timestamp
	8,   // 90: tinkoff.public.invest.api.contract.v1.LastPrice.last_price_type:type_name -> tinkoff.public.invest.api.contract.v1.LastPriceType
	38,  // 91: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.bids:type_name -> tinkoff.public.invest.api.contract.v1.Order
	38,  // 92: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.asks:type_name -> tinkoff.public.invest.api.contract.v1.Order
	68,  // 93: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.last_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 94: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.close_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 95: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.limit_up:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 96: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.limit_down:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 97: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.last_price_ts:type_name -> google.protobuf.Timestamp
	69,  // 98: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.close_price_ts:type_name -> google.protobuf.Timestamp
	69,  // 99: tinkoff.public.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts:type_name -> google.protobuf.Timestamp
	52,  // 100: tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses:type_name -> tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	70,  // 101: tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse.trading_status:type_name -> tinkoff.public.invest.api.contract.v1.SecurityTradingStatus
	69,  // 102: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest.from:type_name -> google.protobuf.Timestamp
	69,  // 103: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest.to:type_name -> google.protobuf.Timestamp
	3,   // 104: tinkoff.public.invest.api.contract.v1.GetLastTradesRequest.trade_source:type_name -> tinkoff.public.invest.api.contract.v1.TradeSourceType
	39,  // 105: tinkoff.public.invest.api.contract.v1.GetLastTradesResponse.trades:type_name -> tinkoff.public.invest.api.contract.v1.Trade
	57,  // 106: tinkoff.public.invest.api.contract.v1.GetClosePricesRequest.instruments:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentClosePriceRequest
	71,  // 107: tinkoff.public.invest.api.contract.v1.GetClosePricesRequest.instrument_status:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentStatus
	59,  // 108: tinkoff.public.invest.api.contract.v1.GetClosePricesResponse.close_prices:type_name -> tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse
	68,  // 109: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 110: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 111: tinkoff.public.invest.api.contract.v1.InstrumentClosePriceResponse.time:type_name -> google.protobuf.Timestamp
	12,  // 112: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.indicator_type:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType
	69,  // 113: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.from:type_name -> google.protobuf.Timestamp
	69,  // 114: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.to:type_name -> google.protobuf.Timestamp
	10,  // 115: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.interval:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval
	11,  // 116: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.type_of_price:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice
	63,  // 117: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.deviation:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation
	62,  // 118: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.smoothing:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing
	64,  // 119: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators:type_name -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem
	68,  // 120: tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	69,  // 121: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp:type_name -> google.protobuf.Timestamp
	68,  // 122: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 123: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 124: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 125: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	68,  // 126: tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd:type_name -> tinkoff.public.invest.api.contract.v1.Quotation
	41,  // 127: tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles:input_type -> tinkoff.public.invest.api.contract.v1.GetCandlesRequest
	44,  // 128: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices:input_type -> tinkoff.public.invest.api.contract.v1.GetLastPricesRequest
	47,  // 129: tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook:input_type -> tinkoff.public.invest.api.contract.v1.GetOrderBookRequest
	49,  // 130: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus:input_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusRequest
	50,  // 131: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses:input_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusesRequest
	53,  // 132: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades:input_type -> tinkoff.public.invest.api.contract.v1.GetLastTradesRequest
	56,  // 133: tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices:input_type -> tinkoff.public.invest.api.contract.v1.GetClosePricesRequest
	60,  // 134: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTechAnalysis:input_type -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisRequest
	13,  // 135: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream:input_type -> tinkoff.public.invest.api.contract.v1.MarketDataRequest
	14,  // 136: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream:input_type -> tinkoff.public.invest.api.contract.v1.MarketDataServerSideStreamRequest
	42,  // 137: tinkoff.public.invest.api.contract.v1.MarketDataService.GetCandles:output_type -> tinkoff.public.invest.api.contract.v1.GetCandlesResponse
	45,  // 138: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastPrices:output_type -> tinkoff.public.invest.api.contract.v1.GetLastPricesResponse
	48,  // 139: tinkoff.public.invest.api.contract.v1.MarketDataService.GetOrderBook:output_type -> tinkoff.public.invest.api.contract.v1.GetOrderBookResponse
	52,  // 140: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatus:output_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusResponse
	51,  // 141: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTradingStatuses:output_type -> tinkoff.public.invest.api.contract.v1.GetTradingStatusesResponse
	54,  // 142: tinkoff.public.invest.api.contract.v1.MarketDataService.GetLastTrades:output_type -> tinkoff.public.invest.api.contract.v1.GetLastTradesResponse
	58,  // 143: tinkoff.public.invest.api.contract.v1.MarketDataService.GetClosePrices:output_type -> tinkoff.public.invest.api.contract.v1.GetClosePricesResponse
	61,  // 144: tinkoff.public.invest.api.contract.v1.MarketDataService.GetTechAnalysis:output_type -> tinkoff.public.invest.api.contract.v1.GetTechAnalysisResponse
	15,  // 145: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataStream:output_type -> tinkoff.public.invest.api.contract.v1.MarketDataResponse
	15,  // 146: tinkoff.public.invest.api.contract.v1.MarketDataStreamService.MarketDataServerSideStream:output_type -> tinkoff.public.invest.api.contract.v1.MarketDataResponse
	137, // [137:147] is the sub-list for method output_type
	127, // [127:137] is the sub-list for method input_type
	127, // [127:127] is the sub-list for extension type_name
	127, // [127:127] is the sub-list for extension extendee
	0,   // [0:127] is the sub-list for field type_name
}

func init() { file_marketdata_proto_init() }
func file_marketdata_proto_init() {
	if File_marketdata_proto != nil {
		return
	}
	file_common_proto_init()
	file_marketdata_proto_msgTypes[0].OneofWrappers = []any{
		(*MarketDataRequest_SubscribeCandlesRequest)(nil),
		(*MarketDataRequest_SubscribeOrderBookRequest)(nil),
		(*MarketDataRequest_SubscribeTradesRequest)(nil),
		(*MarketDataRequest_SubscribeInfoRequest)(nil),
		(*MarketDataRequest_SubscribeLastPriceRequest)(nil),
		(*MarketDataRequest_GetMySubscriptions)(nil),
		(*MarketDataRequest_Ping)(nil),
		(*MarketDataRequest_PingSettings)(nil),
	}
	file_marketdata_proto_msgTypes[2].OneofWrappers = []any{
		(*MarketDataResponse_SubscribeCandlesResponse)(nil),
		(*MarketDataResponse_SubscribeOrderBookResponse)(nil),
		(*MarketDataResponse_SubscribeTradesResponse)(nil),
		(*MarketDataResponse_SubscribeInfoResponse)(nil),
		(*MarketDataResponse_Candle)(nil),
		(*MarketDataResponse_Trade)(nil),
		(*MarketDataResponse_Orderbook)(nil),
		(*MarketDataResponse_TradingStatus)(nil),
		(*MarketDataResponse_Ping)(nil),
		(*MarketDataResponse_SubscribeLastPriceResponse)(nil),
		(*MarketDataResponse_LastPrice)(nil),
	}
	file_marketdata_proto_msgTypes[3].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[6].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[28].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[31].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[34].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[36].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[40].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[43].OneofWrappers = []any{}
	file_marketdata_proto_msgTypes[51].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_marketdata_proto_rawDesc), len(file_marketdata_proto_rawDesc)),
			NumEnums:      13,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_marketdata_proto_goTypes,
		DependencyIndexes: file_marketdata_proto_depIdxs,
		EnumInfos:         file_marketdata_proto_enumTypes,
		MessageInfos:      file_marketdata_proto_msgTypes,
	}.Build()
	File_marketdata_proto = out.File
	file_marketdata_proto_goTypes = nil
	file_marketdata_proto_depIdxs = nil
}
